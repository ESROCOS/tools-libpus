# H2020 ESROCOS Project
# Company: GMV Aerospace & Defence S.A.U.
# Licence: GPLv2

# This file is included from the CMakeLists.txt file in each missionization directory, and 
# creates the missionized instance of the PUS library. This includes creating:
#  - an instance of the PUS library (which also generates the files for the ASN.1 data types)
#  - an instance of the Micropython (mpy) library, used to implement the service 18 (OBCP)
#  - an instance of the Python bindings for the PUS library (pylib), for use by the PUS console GUI
#  - the missionized PUS library, including the mission definitions and linking with the above instances
#
# The file creates the targets:
#  - esrocos_pus_${MISSION}
# where ${MISSION} is the configuration name, usually the name of the directory with the configuration files.


# The mission-specific PUS library
set(LIBPUS_MISSION "esrocos_pus_${MISSION}")


#
# Build the instances of the PUS, Micropython and bindings library, including the common code and the mission definitions
#

add_subdirectory(${CMAKE_SOURCE_DIR}/src ${CMAKE_CURRENT_BINARY_DIR}/pus)
add_subdirectory(${CMAKE_SOURCE_DIR}/mpy ${CMAKE_CURRENT_BINARY_DIR}/mpy)
add_subdirectory(${CMAKE_SOURCE_DIR}/pylib ${CMAKE_CURRENT_BINARY_DIR}/pylib)


#
# Generate the code for the mission-specific definitions
#

# Input and ouput directories
set(JSON_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(OUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")

# Mission configuration JSON files
file(GLOB JSON "${JSON_DIR}/*.json")


# Run files generation once so that FILE(GLOB ...) will find the files
execute_process(
    COMMAND python3 ${PROJECT_SOURCE_DIR}/python/generate_mission_config.py ${JSON_DIR} ${OUT_DIR}
    RESULT_VARIABLE GEN_RESULT
)

if(${GEN_RESULT} EQUAL 0)
    message(STATUS "Mission files generation successful.")
else()
    message(FATAL_ERROR "Mission files generation failed.")
endif()


# Command for mission files generation; creates timestamp file
add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/pus-mission-stamp
    COMMAND python3 ${PROJECT_SOURCE_DIR}/python/generate_mission_config.py ${JSON_DIR} ${OUT_DIR}
    COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_CURRENT_BINARY_DIR}/pus-mission-stamp
    DEPENDS ${JSON} python_pus_config
    COMMENT "Generate code for mission configuration ${JSON_DIR} in ${OUT_DIR}"
)

# Target for mission code generation; uses stamp file to run dependent targets only if changed
add_custom_target(
    mission_generate_code_${MISSION}
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/pus-mission-stamp
)

# Mission-specific C files
file(GLOB GENERATED_C_FILES "${OUT_DIR}/src/*.c")
file(GLOB USER_C_FILES "${JSON_DIR}/*.c")
set(C_FILES ${GENERATED_C_FILES} ${USER_C_FILES})


#
# Create the mission-specific library, linking with the PUS library instance (mutual dependency)
#

# Define the mission-specific library
add_library(${LIBPUS_MISSION} STATIC ${C_FILES})
target_link_libraries(${LIBPUS_MISSION} esrocos_pus)
target_include_directories(${LIBPUS_MISSION} PUBLIC ${OUT_DIR}/include)
set_target_properties(${LIBPUS_MISSION} PROPERTIES 
    LINKER_LANGUAGE C
    POSITION_INDEPENDENT_CODE TRUE
)
add_dependencies(${LIBPUS_MISSION} mission_generate_code_${MISSION})
add_coverage(${LIBPUS_MISSION})



#
# Installation
#

install(TARGETS ${LIBPUS_MISSION}
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)

