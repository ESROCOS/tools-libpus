#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    
    byte arr[10];
} asn1SccPusSt18ObcpId;

#define asn1SccPusSt18ObcpId_REQUIRED_BYTES_FOR_ENCODING       10 
#define asn1SccPusSt18ObcpId_REQUIRED_BITS_FOR_ENCODING        80
#define asn1SccPusSt18ObcpId_REQUIRED_BYTES_FOR_ACN_ENCODING   10 
#define asn1SccPusSt18ObcpId_REQUIRED_BITS_FOR_ACN_ENCODING    80
#define asn1SccPusSt18ObcpId_REQUIRED_BYTES_FOR_XER_ENCODING   51

void asn1SccPusSt18ObcpId_Initialize(asn1SccPusSt18ObcpId* pVal);
flag asn1SccPusSt18ObcpId_IsConstraintValid(const asn1SccPusSt18ObcpId* val, int* pErrCode);
#ifndef ERR_asn1SccPusSt18ObcpId 
#define ERR_asn1SccPusSt18ObcpId		1001  /*(SIZE(pus-ST18-SIZE-OBCP-ID))*/
#endif

typedef struct {
    asn1SccPusSt18ObcpId obcpId;
} asn1SccPusTC_18_2_6_12_Data;

#define asn1SccPusTC_18_2_6_12_Data_REQUIRED_BYTES_FOR_ENCODING       10 
#define asn1SccPusTC_18_2_6_12_Data_REQUIRED_BITS_FOR_ENCODING        80
#define asn1SccPusTC_18_2_6_12_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   10 
#define asn1SccPusTC_18_2_6_12_Data_REQUIRED_BITS_FOR_ACN_ENCODING    80
#define asn1SccPusTC_18_2_6_12_Data_REQUIRED_BYTES_FOR_XER_ENCODING   82

void asn1SccPusTC_18_2_6_12_Data_Initialize(asn1SccPusTC_18_2_6_12_Data* pVal);
flag asn1SccPusTC_18_2_6_12_Data_IsConstraintValid(const asn1SccPusTC_18_2_6_12_Data* val, int* pErrCode);


typedef struct {    int nCount; 
    
    byte arr[1000];
} asn1SccPusSt18ObcpCode;

#define asn1SccPusSt18ObcpCode_REQUIRED_BYTES_FOR_ENCODING       1002 
#define asn1SccPusSt18ObcpCode_REQUIRED_BITS_FOR_ENCODING        8010
#define asn1SccPusSt18ObcpCode_REQUIRED_BYTES_FOR_ACN_ENCODING   1002 
#define asn1SccPusSt18ObcpCode_REQUIRED_BITS_FOR_ACN_ENCODING    8010
#define asn1SccPusSt18ObcpCode_REQUIRED_BYTES_FOR_XER_ENCODING   2035

void asn1SccPusSt18ObcpCode_Initialize(asn1SccPusSt18ObcpCode* pVal);
flag asn1SccPusSt18ObcpCode_IsConstraintValid(const asn1SccPusSt18ObcpCode* val, int* pErrCode);
#ifndef ERR_asn1SccPusSt18ObcpCode 
#define ERR_asn1SccPusSt18ObcpCode		1002  /*(SIZE(1 .. pus-ST18-MAX-SIZE-OBCP-CODE))*/
#endif

typedef enum {
    asn1Sccnone = 0,
    asn1Sccprocedure = 1,
    asn1Sccstep = 2,
    asn1Sccdetailed = 3
} asn1SccPusSt18ObservabilityLevel;

#define asn1SccPusSt18ObservabilityLevel_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusSt18ObservabilityLevel_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccPusSt18ObservabilityLevel_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusSt18ObservabilityLevel_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccPusSt18ObservabilityLevel_REQUIRED_BYTES_FOR_XER_ENCODING   66

void asn1SccPusSt18ObservabilityLevel_Initialize(asn1SccPusSt18ObservabilityLevel* pVal);
flag asn1SccPusSt18ObservabilityLevel_IsConstraintValid(const asn1SccPusSt18ObservabilityLevel* val, int* pErrCode);
#ifndef ERR_asn1SccPusSt18ObservabilityLevel_unknown_enumeration_value 
#define ERR_asn1SccPusSt18ObservabilityLevel_unknown_enumeration_value		1004  /**/
#endif
#ifndef ERR_asn1SccPusSt18ObservabilityLevel 
#define ERR_asn1SccPusSt18ObservabilityLevel		1003  /**/
#endif

typedef struct {
    asn1SccPusSt18ObcpId obcpId;
    asn1SccPusSt18ObservabilityLevel observabilityLevel;
} asn1SccPusTC_18_3_Data;

#define asn1SccPusTC_18_3_Data_REQUIRED_BYTES_FOR_ENCODING       11 
#define asn1SccPusTC_18_3_Data_REQUIRED_BITS_FOR_ENCODING        82
#define asn1SccPusTC_18_3_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   11 
#define asn1SccPusTC_18_3_Data_REQUIRED_BITS_FOR_ACN_ENCODING    82
#define asn1SccPusTC_18_3_Data_REQUIRED_BYTES_FOR_XER_ENCODING   124

void asn1SccPusTC_18_3_Data_Initialize(asn1SccPusTC_18_3_Data* pVal);
flag asn1SccPusTC_18_3_Data_IsConstraintValid(const asn1SccPusTC_18_3_Data* val, int* pErrCode);


typedef enum {
    asn1Sccpus_CCSDS_V1 = 0
} asn1SccPusPacketVersion;

#define asn1SccPusPacketVersion_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccPusPacketVersion_REQUIRED_BITS_FOR_ENCODING        0
#define asn1SccPusPacketVersion_REQUIRED_BYTES_FOR_ACN_ENCODING   0 
#define asn1SccPusPacketVersion_REQUIRED_BITS_FOR_ACN_ENCODING    0
#define asn1SccPusPacketVersion_REQUIRED_BYTES_FOR_XER_ENCODING   64

void asn1SccPusPacketVersion_Initialize(asn1SccPusPacketVersion* pVal);
flag asn1SccPusPacketVersion_IsConstraintValid(const asn1SccPusPacketVersion* val, int* pErrCode);
#ifndef ERR_asn1SccPusPacketVersion_unknown_enumeration_value 
#define ERR_asn1SccPusPacketVersion_unknown_enumeration_value		1006  /**/
#endif
#ifndef ERR_asn1SccPusPacketVersion 
#define ERR_asn1SccPusPacketVersion		1005  /*(pus-CCSDS-V1)*/
#endif

typedef enum {
    asn1Sccpus_TM = 0,
    asn1Sccpus_TC = 1
} asn1SccPusPacketType;

#define asn1SccPusPacketType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusPacketType_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccPusPacketType_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusPacketType_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccPusPacketType_REQUIRED_BYTES_FOR_XER_ENCODING   46

void asn1SccPusPacketType_Initialize(asn1SccPusPacketType* pVal);
flag asn1SccPusPacketType_IsConstraintValid(const asn1SccPusPacketType* val, int* pErrCode);
#ifndef ERR_asn1SccPusPacketType_unknown_enumeration_value 
#define ERR_asn1SccPusPacketType_unknown_enumeration_value		1008  /**/
#endif
#ifndef ERR_asn1SccPusPacketType 
#define ERR_asn1SccPusPacketType		1007  /**/
#endif

typedef flag asn1SccPusSecondaryHeaderFlag;

#define asn1SccPusSecondaryHeaderFlag_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusSecondaryHeaderFlag_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccPusSecondaryHeaderFlag_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusSecondaryHeaderFlag_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccPusSecondaryHeaderFlag_REQUIRED_BYTES_FOR_XER_ENCODING   62

void asn1SccPusSecondaryHeaderFlag_Initialize(asn1SccPusSecondaryHeaderFlag* pVal);
flag asn1SccPusSecondaryHeaderFlag_IsConstraintValid(const asn1SccPusSecondaryHeaderFlag* val, int* pErrCode);


typedef enum {
    asn1Sccpus_STANDALONE_PACKET = 3
} asn1SccPusSequenceFlags;

#define asn1SccPusSequenceFlags_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccPusSequenceFlags_REQUIRED_BITS_FOR_ENCODING        0
#define asn1SccPusSequenceFlags_REQUIRED_BYTES_FOR_ACN_ENCODING   0 
#define asn1SccPusSequenceFlags_REQUIRED_BITS_FOR_ACN_ENCODING    0
#define asn1SccPusSequenceFlags_REQUIRED_BYTES_FOR_XER_ENCODING   82

void asn1SccPusSequenceFlags_Initialize(asn1SccPusSequenceFlags* pVal);
flag asn1SccPusSequenceFlags_IsConstraintValid(const asn1SccPusSequenceFlags* val, int* pErrCode);
#ifndef ERR_asn1SccPusSequenceFlags_unknown_enumeration_value 
#define ERR_asn1SccPusSequenceFlags_unknown_enumeration_value		1010  /**/
#endif
#ifndef ERR_asn1SccPusSequenceFlags 
#define ERR_asn1SccPusSequenceFlags		1009  /*(pus-STANDALONE-PACKET)*/
#endif

typedef enum {
    asn1Sccpus_V0 = 0,
    asn1Sccpus_V1 = 1,
    asn1Sccpus_V2 = 2,
    asn1Sccpus_INVALID_VERSION = 15
} asn1SccPusVersionNumber;

#define asn1SccPusVersionNumber_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusVersionNumber_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccPusVersionNumber_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusVersionNumber_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccPusVersionNumber_REQUIRED_BYTES_FOR_XER_ENCODING   52

void asn1SccPusVersionNumber_Initialize(asn1SccPusVersionNumber* pVal);
flag asn1SccPusVersionNumber_IsConstraintValid(const asn1SccPusVersionNumber* val, int* pErrCode);
#ifndef ERR_asn1SccPusVersionNumber_unknown_enumeration_value 
#define ERR_asn1SccPusVersionNumber_unknown_enumeration_value		1012  /**/
#endif
#ifndef ERR_asn1SccPusVersionNumber 
#define ERR_asn1SccPusVersionNumber		1011  /**/
#endif

typedef struct {
    flag acceptanceReportRequested;
    flag startReportRequested;
    flag progressReportRequested;
    flag completionReportRequested;
} asn1SccPusAcknowledgementFlags;

#define asn1SccPusAcknowledgementFlags_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusAcknowledgementFlags_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccPusAcknowledgementFlags_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusAcknowledgementFlags_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccPusAcknowledgementFlags_REQUIRED_BYTES_FOR_XER_ENCODING   309

void asn1SccPusAcknowledgementFlags_Initialize(asn1SccPusAcknowledgementFlags* pVal);
flag asn1SccPusAcknowledgementFlags_IsConstraintValid(const asn1SccPusAcknowledgementFlags* val, int* pErrCode);


typedef asn1SccSint asn1SccT_Int32;

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int32 
#define ERR_asn1SccT_Int32		1013  /*(-2147483648 .. 2147483647)*/
#endif

typedef asn1SccUint asn1SccT_UInt32;

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt32 
#define ERR_asn1SccT_UInt32		1014  /*(0 .. 4294967295)*/
#endif

typedef asn1SccSint asn1SccT_Int8;

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_XER_ENCODING   37

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int8 
#define ERR_asn1SccT_Int8		1015  /*(-128 .. 127)*/
#endif

typedef asn1SccUint asn1SccT_UInt8;

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt8 
#define ERR_asn1SccT_UInt8		1016  /*(0 .. 255)*/
#endif

typedef flag asn1SccT_Boolean;

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   36

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* val, int* pErrCode);


typedef struct {    int nCount; 
    
    byte arr[30];
} asn1SccPusSt23RepositoryPath;

#define asn1SccPusSt23RepositoryPath_REQUIRED_BYTES_FOR_ENCODING       31 
#define asn1SccPusSt23RepositoryPath_REQUIRED_BITS_FOR_ENCODING        245
#define asn1SccPusSt23RepositoryPath_REQUIRED_BYTES_FOR_ACN_ENCODING   31 
#define asn1SccPusSt23RepositoryPath_REQUIRED_BITS_FOR_ACN_ENCODING    245
#define asn1SccPusSt23RepositoryPath_REQUIRED_BYTES_FOR_XER_ENCODING   107

void asn1SccPusSt23RepositoryPath_Initialize(asn1SccPusSt23RepositoryPath* pVal);
flag asn1SccPusSt23RepositoryPath_IsConstraintValid(const asn1SccPusSt23RepositoryPath* val, int* pErrCode);
#ifndef ERR_asn1SccPusSt23RepositoryPath 
#define ERR_asn1SccPusSt23RepositoryPath		1017  /*(SIZE(1 .. pus-ST23-MAX-SIZE-REPOSITORY-PATH))*/
#endif

typedef struct {    int nCount; 
    
    byte arr[30];
} asn1SccPusSt23FileName;

#define asn1SccPusSt23FileName_REQUIRED_BYTES_FOR_ENCODING       31 
#define asn1SccPusSt23FileName_REQUIRED_BITS_FOR_ENCODING        245
#define asn1SccPusSt23FileName_REQUIRED_BYTES_FOR_ACN_ENCODING   31 
#define asn1SccPusSt23FileName_REQUIRED_BITS_FOR_ACN_ENCODING    245
#define asn1SccPusSt23FileName_REQUIRED_BYTES_FOR_XER_ENCODING   95

void asn1SccPusSt23FileName_Initialize(asn1SccPusSt23FileName* pVal);
flag asn1SccPusSt23FileName_IsConstraintValid(const asn1SccPusSt23FileName* val, int* pErrCode);
#ifndef ERR_asn1SccPusSt23FileName 
#define ERR_asn1SccPusSt23FileName		1018  /*(SIZE(1 .. pus-ST23-MAX-SIZE-FILE-PATH))*/
#endif

typedef struct {
    asn1SccPusSt18ObcpId obcpId;
    asn1SccPusSt23RepositoryPath repository;
    asn1SccPusSt23FileName fileName;
} asn1SccPusTC_18_13_Data;

#define asn1SccPusTC_18_13_Data_REQUIRED_BYTES_FOR_ENCODING       72 
#define asn1SccPusTC_18_13_Data_REQUIRED_BITS_FOR_ENCODING        570
#define asn1SccPusTC_18_13_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   72 
#define asn1SccPusTC_18_13_Data_REQUIRED_BITS_FOR_ACN_ENCODING    570
#define asn1SccPusTC_18_13_Data_REQUIRED_BYTES_FOR_XER_ENCODING   240

void asn1SccPusTC_18_13_Data_Initialize(asn1SccPusTC_18_13_Data* pVal);
flag asn1SccPusTC_18_13_Data_IsConstraintValid(const asn1SccPusTC_18_13_Data* val, int* pErrCode);


typedef struct {
    asn1SccPusSt23RepositoryPath repository;
    asn1SccPusSt23FileName fileName;
} asn1SccPusTC_23_2_3_Data;

#define asn1SccPusTC_23_2_3_Data_REQUIRED_BYTES_FOR_ENCODING       62 
#define asn1SccPusTC_23_2_3_Data_REQUIRED_BITS_FOR_ENCODING        490
#define asn1SccPusTC_23_2_3_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   62 
#define asn1SccPusTC_23_2_3_Data_REQUIRED_BITS_FOR_ACN_ENCODING    490
#define asn1SccPusTC_23_2_3_Data_REQUIRED_BYTES_FOR_XER_ENCODING   205

void asn1SccPusTC_23_2_3_Data_Initialize(asn1SccPusTC_23_2_3_Data* pVal);
flag asn1SccPusTC_23_2_3_Data_IsConstraintValid(const asn1SccPusTC_23_2_3_Data* val, int* pErrCode);


typedef struct {
    asn1SccPusSt23RepositoryPath sourceRepository;
    asn1SccPusSt23FileName sourceFileName;
    asn1SccPusSt23RepositoryPath targetRepository;
    asn1SccPusSt23FileName targetFileName;
} asn1SccPusTC_23_14_Data;

#define asn1SccPusTC_23_14_Data_REQUIRED_BYTES_FOR_ENCODING       123 
#define asn1SccPusTC_23_14_Data_REQUIRED_BITS_FOR_ENCODING        980
#define asn1SccPusTC_23_14_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   123 
#define asn1SccPusTC_23_14_Data_REQUIRED_BITS_FOR_ACN_ENCODING    980
#define asn1SccPusTC_23_14_Data_REQUIRED_BYTES_FOR_XER_ENCODING   417

void asn1SccPusTC_23_14_Data_Initialize(asn1SccPusTC_23_14_Data* pVal);
flag asn1SccPusTC_23_14_Data_IsConstraintValid(const asn1SccPusTC_23_14_Data* val, int* pErrCode);


typedef struct {    int nCount; 
    
    byte arr[30];
} asn1SccPusSt23RepositoryDomain;

#define asn1SccPusSt23RepositoryDomain_REQUIRED_BYTES_FOR_ENCODING       31 
#define asn1SccPusSt23RepositoryDomain_REQUIRED_BITS_FOR_ENCODING        245
#define asn1SccPusSt23RepositoryDomain_REQUIRED_BYTES_FOR_ACN_ENCODING   31 
#define asn1SccPusSt23RepositoryDomain_REQUIRED_BITS_FOR_ACN_ENCODING    245
#define asn1SccPusSt23RepositoryDomain_REQUIRED_BYTES_FOR_XER_ENCODING   111

void asn1SccPusSt23RepositoryDomain_Initialize(asn1SccPusSt23RepositoryDomain* pVal);
flag asn1SccPusSt23RepositoryDomain_IsConstraintValid(const asn1SccPusSt23RepositoryDomain* val, int* pErrCode);
#ifndef ERR_asn1SccPusSt23RepositoryDomain 
#define ERR_asn1SccPusSt23RepositoryDomain		1019  /*(SIZE(1 .. pus-ST23-MAX-SIZE-REPOSITORY-DOMAIN))*/
#endif

typedef asn1SccUint asn1SccPusUInt3;

#define asn1SccPusUInt3_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusUInt3_REQUIRED_BITS_FOR_ENCODING        3
#define asn1SccPusUInt3_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusUInt3_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define asn1SccPusUInt3_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccPusUInt3_Initialize(asn1SccPusUInt3* pVal);
flag asn1SccPusUInt3_IsConstraintValid(const asn1SccPusUInt3* val, int* pErrCode);
#ifndef ERR_asn1SccPusUInt3 
#define ERR_asn1SccPusUInt3		1020  /*(0 .. 7)*/
#endif

typedef asn1SccUint asn1SccPusUInt4;

#define asn1SccPusUInt4_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusUInt4_REQUIRED_BITS_FOR_ENCODING        3
#define asn1SccPusUInt4_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusUInt4_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define asn1SccPusUInt4_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccPusUInt4_Initialize(asn1SccPusUInt4* pVal);
flag asn1SccPusUInt4_IsConstraintValid(const asn1SccPusUInt4* val, int* pErrCode);
#ifndef ERR_asn1SccPusUInt4 
#define ERR_asn1SccPusUInt4		1021  /*(0 .. 5)*/
#endif

typedef asn1SccPusUInt4 asn1SccPusTimeReferenceStatus;

#define asn1SccPusTimeReferenceStatus_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusTimeReferenceStatus_REQUIRED_BITS_FOR_ENCODING        3
#define asn1SccPusTimeReferenceStatus_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusTimeReferenceStatus_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define asn1SccPusTimeReferenceStatus_REQUIRED_BYTES_FOR_XER_ENCODING   69

void asn1SccPusTimeReferenceStatus_Initialize(asn1SccPusTimeReferenceStatus* pVal);
flag asn1SccPusTimeReferenceStatus_IsConstraintValid(const asn1SccPusTimeReferenceStatus* val, int* pErrCode);


typedef asn1SccUint asn1SccPusUInt8;

#define asn1SccPusUInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusUInt8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccPusUInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusUInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccPusUInt8_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccPusUInt8_Initialize(asn1SccPusUInt8* pVal);
flag asn1SccPusUInt8_IsConstraintValid(const asn1SccPusUInt8* val, int* pErrCode);
#ifndef ERR_asn1SccPusUInt8 
#define ERR_asn1SccPusUInt8		1022  /*(0 .. 255)*/
#endif

typedef asn1SccPusUInt8 asn1SccPusServiceType;

#define asn1SccPusServiceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusServiceType_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccPusServiceType_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusServiceType_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccPusServiceType_REQUIRED_BYTES_FOR_XER_ENCODING   53

void asn1SccPusServiceType_Initialize(asn1SccPusServiceType* pVal);
flag asn1SccPusServiceType_IsConstraintValid(const asn1SccPusServiceType* val, int* pErrCode);


typedef asn1SccPusUInt8 asn1SccPusSubserviceType;

#define asn1SccPusSubserviceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPusSubserviceType_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccPusSubserviceType_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccPusSubserviceType_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccPusSubserviceType_REQUIRED_BYTES_FOR_XER_ENCODING   59

void asn1SccPusSubserviceType_Initialize(asn1SccPusSubserviceType* pVal);
flag asn1SccPusSubserviceType_IsConstraintValid(const asn1SccPusSubserviceType* val, int* pErrCode);


typedef asn1SccUint asn1SccPusUInt11;

#define asn1SccPusUInt11_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusUInt11_REQUIRED_BITS_FOR_ENCODING        11
#define asn1SccPusUInt11_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusUInt11_REQUIRED_BITS_FOR_ACN_ENCODING    11
#define asn1SccPusUInt11_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccPusUInt11_Initialize(asn1SccPusUInt11* pVal);
flag asn1SccPusUInt11_IsConstraintValid(const asn1SccPusUInt11* val, int* pErrCode);
#ifndef ERR_asn1SccPusUInt11 
#define ERR_asn1SccPusUInt11		1023  /*(0 .. 2047)*/
#endif

typedef asn1SccPusUInt11 asn1SccPusApid;

#define asn1SccPusApid_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusApid_REQUIRED_BITS_FOR_ENCODING        11
#define asn1SccPusApid_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusApid_REQUIRED_BITS_FOR_ACN_ENCODING    11
#define asn1SccPusApid_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccPusApid_Initialize(asn1SccPusApid* pVal);
flag asn1SccPusApid_IsConstraintValid(const asn1SccPusApid* val, int* pErrCode);


typedef struct {
    asn1SccPusVersionNumber pusVersion;
    asn1SccPusAcknowledgementFlags ackFlags;
    asn1SccPusServiceType serviceId;
    asn1SccPusSubserviceType subtype;
    asn1SccPusApid source;
} asn1SccPusTcHeader;

#define asn1SccPusTcHeader_REQUIRED_BYTES_FOR_ENCODING       5 
#define asn1SccPusTcHeader_REQUIRED_BITS_FOR_ENCODING        33
#define asn1SccPusTcHeader_REQUIRED_BYTES_FOR_ACN_ENCODING   5 
#define asn1SccPusTcHeader_REQUIRED_BITS_FOR_ACN_ENCODING    33
#define asn1SccPusTcHeader_REQUIRED_BYTES_FOR_XER_ENCODING   465

void asn1SccPusTcHeader_Initialize(asn1SccPusTcHeader* pVal);
flag asn1SccPusTcHeader_IsConstraintValid(const asn1SccPusTcHeader* val, int* pErrCode);


typedef asn1SccUint asn1SccPusUInt14;

#define asn1SccPusUInt14_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusUInt14_REQUIRED_BITS_FOR_ENCODING        14
#define asn1SccPusUInt14_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusUInt14_REQUIRED_BITS_FOR_ACN_ENCODING    14
#define asn1SccPusUInt14_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccPusUInt14_Initialize(asn1SccPusUInt14* pVal);
flag asn1SccPusUInt14_IsConstraintValid(const asn1SccPusUInt14* val, int* pErrCode);
#ifndef ERR_asn1SccPusUInt14 
#define ERR_asn1SccPusUInt14		1024  /*(0 .. 16383)*/
#endif

typedef asn1SccPusUInt14 asn1SccPusSequenceCount;

#define asn1SccPusSequenceCount_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusSequenceCount_REQUIRED_BITS_FOR_ENCODING        14
#define asn1SccPusSequenceCount_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusSequenceCount_REQUIRED_BITS_FOR_ACN_ENCODING    14
#define asn1SccPusSequenceCount_REQUIRED_BYTES_FOR_XER_ENCODING   57

void asn1SccPusSequenceCount_Initialize(asn1SccPusSequenceCount* pVal);
flag asn1SccPusSequenceCount_IsConstraintValid(const asn1SccPusSequenceCount* val, int* pErrCode);


typedef struct {
    asn1SccPusPacketVersion packetVersion;
    asn1SccPusPacketType packetType;
    asn1SccPusSecondaryHeaderFlag secondaryHeaderFlag;
    asn1SccPusApid apid;
    asn1SccPusSequenceFlags sequenceFlags;
    asn1SccPusSequenceCount sequenceCount;
} asn1SccPusSt01RequestId;

#define asn1SccPusSt01RequestId_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt01RequestId_REQUIRED_BITS_FOR_ENCODING        27
#define asn1SccPusSt01RequestId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt01RequestId_REQUIRED_BITS_FOR_ACN_ENCODING    27
#define asn1SccPusSt01RequestId_REQUIRED_BYTES_FOR_XER_ENCODING   351

void asn1SccPusSt01RequestId_Initialize(asn1SccPusSt01RequestId* pVal);
flag asn1SccPusSt01RequestId_IsConstraintValid(const asn1SccPusSt01RequestId* val, int* pErrCode);


typedef asn1SccUint asn1SccPusUInt16;

#define asn1SccPusUInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusUInt16_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccPusUInt16_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusUInt16_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccPusUInt16_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccPusUInt16_Initialize(asn1SccPusUInt16* pVal);
flag asn1SccPusUInt16_IsConstraintValid(const asn1SccPusUInt16* val, int* pErrCode);
#ifndef ERR_asn1SccPusUInt16 
#define ERR_asn1SccPusUInt16		1025  /*(0 .. 65535)*/
#endif

typedef asn1SccPusUInt16 asn1SccPusSt18ObcpChecksum;

#define asn1SccPusSt18ObcpChecksum_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusSt18ObcpChecksum_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccPusSt18ObcpChecksum_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusSt18ObcpChecksum_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccPusSt18ObcpChecksum_REQUIRED_BYTES_FOR_XER_ENCODING   63

void asn1SccPusSt18ObcpChecksum_Initialize(asn1SccPusSt18ObcpChecksum* pVal);
flag asn1SccPusSt18ObcpChecksum_IsConstraintValid(const asn1SccPusSt18ObcpChecksum* val, int* pErrCode);


typedef struct {
    asn1SccPusSt18ObcpId obcpId;
    asn1SccPusSt18ObcpCode obcpCode;
    asn1SccPusSt18ObcpChecksum checksum;
} asn1SccPusTC_18_1_Data;

#define asn1SccPusTC_18_1_Data_REQUIRED_BYTES_FOR_ENCODING       1014 
#define asn1SccPusTC_18_1_Data_REQUIRED_BITS_FOR_ENCODING        8106
#define asn1SccPusTC_18_1_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   1014 
#define asn1SccPusTC_18_1_Data_REQUIRED_BITS_FOR_ACN_ENCODING    8106
#define asn1SccPusTC_18_1_Data_REQUIRED_BYTES_FOR_XER_ENCODING   2134

void asn1SccPusTC_18_1_Data_Initialize(asn1SccPusTC_18_1_Data* pVal);
flag asn1SccPusTC_18_1_Data_IsConstraintValid(const asn1SccPusTC_18_1_Data* val, int* pErrCode);


typedef asn1SccPusUInt16 asn1SccPusPacketDataLength;

#define asn1SccPusPacketDataLength_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusPacketDataLength_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccPusPacketDataLength_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusPacketDataLength_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccPusPacketDataLength_REQUIRED_BYTES_FOR_XER_ENCODING   63

void asn1SccPusPacketDataLength_Initialize(asn1SccPusPacketDataLength* pVal);
flag asn1SccPusPacketDataLength_IsConstraintValid(const asn1SccPusPacketDataLength* val, int* pErrCode);


typedef asn1SccPusUInt16 asn1SccPusMessageTypeCounter;

#define asn1SccPusMessageTypeCounter_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusMessageTypeCounter_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccPusMessageTypeCounter_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusMessageTypeCounter_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccPusMessageTypeCounter_REQUIRED_BYTES_FOR_XER_ENCODING   67

void asn1SccPusMessageTypeCounter_Initialize(asn1SccPusMessageTypeCounter* pVal);
flag asn1SccPusMessageTypeCounter_IsConstraintValid(const asn1SccPusMessageTypeCounter* val, int* pErrCode);


typedef asn1SccPusUInt16 asn1SccPusChecksum;

#define asn1SccPusChecksum_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccPusChecksum_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccPusChecksum_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccPusChecksum_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccPusChecksum_REQUIRED_BYTES_FOR_XER_ENCODING   47

void asn1SccPusChecksum_Initialize(asn1SccPusChecksum* pVal);
flag asn1SccPusChecksum_IsConstraintValid(const asn1SccPusChecksum* val, int* pErrCode);


typedef asn1SccUint asn1SccPusUInt32;

#define asn1SccPusUInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusUInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusUInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusUInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusUInt32_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccPusUInt32_Initialize(asn1SccPusUInt32* pVal);
flag asn1SccPusUInt32_IsConstraintValid(const asn1SccPusUInt32* val, int* pErrCode);
#ifndef ERR_asn1SccPusUInt32 
#define ERR_asn1SccPusUInt32		1026  /*(0 .. 4294967295)*/
#endif

typedef asn1SccPusUInt32 asn1SccPusSt09ExponentialRate;

#define asn1SccPusSt09ExponentialRate_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt09ExponentialRate_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusSt09ExponentialRate_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt09ExponentialRate_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusSt09ExponentialRate_REQUIRED_BYTES_FOR_XER_ENCODING   69

void asn1SccPusSt09ExponentialRate_Initialize(asn1SccPusSt09ExponentialRate* pVal);
flag asn1SccPusSt09ExponentialRate_IsConstraintValid(const asn1SccPusSt09ExponentialRate* val, int* pErrCode);


typedef struct {
    asn1SccPusSt09ExponentialRate exponentialRate;
} asn1SccPusTC_9_1_Data;

#define asn1SccPusTC_9_1_Data_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusTC_9_1_Data_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusTC_9_1_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusTC_9_1_Data_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusTC_9_1_Data_REQUIRED_BYTES_FOR_XER_ENCODING   88

void asn1SccPusTC_9_1_Data_Initialize(asn1SccPusTC_9_1_Data* pVal);
flag asn1SccPusTC_9_1_Data_IsConstraintValid(const asn1SccPusTC_9_1_Data* val, int* pErrCode);


typedef struct {
    asn1SccPusSt18ObcpId obcpId;
    asn1SccPusUInt32 stepId;
} asn1SccPusTC_18_4_5_Data;

#define asn1SccPusTC_18_4_5_Data_REQUIRED_BYTES_FOR_ENCODING       14 
#define asn1SccPusTC_18_4_5_Data_REQUIRED_BITS_FOR_ENCODING        112
#define asn1SccPusTC_18_4_5_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   14 
#define asn1SccPusTC_18_4_5_Data_REQUIRED_BITS_FOR_ACN_ENCODING    112
#define asn1SccPusTC_18_4_5_Data_REQUIRED_BYTES_FOR_XER_ENCODING   113

void asn1SccPusTC_18_4_5_Data_Initialize(asn1SccPusTC_18_4_5_Data* pVal);
flag asn1SccPusTC_18_4_5_Data_IsConstraintValid(const asn1SccPusTC_18_4_5_Data* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusSt05EventId;

#define asn1SccPusSt05EventId_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt05EventId_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusSt05EventId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt05EventId_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusSt05EventId_REQUIRED_BYTES_FOR_XER_ENCODING   53

void asn1SccPusSt05EventId_Initialize(asn1SccPusSt05EventId* pVal);
flag asn1SccPusSt05EventId_IsConstraintValid(const asn1SccPusSt05EventId* val, int* pErrCode);


typedef struct {
    asn1SccPusSt05EventId eventId;
} asn1SccPusTC_19_X_Data;

#define asn1SccPusTC_19_X_Data_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusTC_19_X_Data_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusTC_19_X_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusTC_19_X_Data_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusTC_19_X_Data_REQUIRED_BYTES_FOR_XER_ENCODING   74

void asn1SccPusTC_19_X_Data_Initialize(asn1SccPusTC_19_X_Data* pVal);
flag asn1SccPusTC_19_X_Data_IsConstraintValid(const asn1SccPusTC_19_X_Data* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusSt03HousekeepingReportId;

#define asn1SccPusSt03HousekeepingReportId_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt03HousekeepingReportId_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusSt03HousekeepingReportId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt03HousekeepingReportId_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusSt03HousekeepingReportId_REQUIRED_BYTES_FOR_XER_ENCODING   79

void asn1SccPusSt03HousekeepingReportId_Initialize(asn1SccPusSt03HousekeepingReportId* pVal);
flag asn1SccPusSt03HousekeepingReportId_IsConstraintValid(const asn1SccPusSt03HousekeepingReportId* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusSt03ParameterId;

#define asn1SccPusSt03ParameterId_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt03ParameterId_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusSt03ParameterId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt03ParameterId_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusSt03ParameterId_REQUIRED_BYTES_FOR_XER_ENCODING   61

void asn1SccPusSt03ParameterId_Initialize(asn1SccPusSt03ParameterId* pVal);
flag asn1SccPusSt03ParameterId_IsConstraintValid(const asn1SccPusSt03ParameterId* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusStepId;

#define asn1SccPusStepId_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusStepId_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusStepId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusStepId_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusStepId_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccPusStepId_Initialize(asn1SccPusStepId* pVal);
flag asn1SccPusStepId_IsConstraintValid(const asn1SccPusStepId* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusSt12pmonId;

#define asn1SccPusSt12pmonId_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt12pmonId_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusSt12pmonId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt12pmonId_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusSt12pmonId_REQUIRED_BYTES_FOR_XER_ENCODING   51

void asn1SccPusSt12pmonId_Initialize(asn1SccPusSt12pmonId* pVal);
flag asn1SccPusSt12pmonId_IsConstraintValid(const asn1SccPusSt12pmonId* val, int* pErrCode);


typedef struct {
    asn1SccPusSt12pmonId pmonId;
} asn1SccPusTC_12_1_2_Data;

#define asn1SccPusTC_12_1_2_Data_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusTC_12_1_2_Data_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusTC_12_1_2_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusTC_12_1_2_Data_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusTC_12_1_2_Data_REQUIRED_BYTES_FOR_XER_ENCODING   76

void asn1SccPusTC_12_1_2_Data_Initialize(asn1SccPusTC_12_1_2_Data* pVal);
flag asn1SccPusTC_12_1_2_Data_IsConstraintValid(const asn1SccPusTC_12_1_2_Data* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusSt01FailureCode;

#define asn1SccPusSt01FailureCode_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt01FailureCode_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusSt01FailureCode_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt01FailureCode_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusSt01FailureCode_REQUIRED_BYTES_FOR_XER_ENCODING   61

void asn1SccPusSt01FailureCode_Initialize(asn1SccPusSt01FailureCode* pVal);
flag asn1SccPusSt01FailureCode_IsConstraintValid(const asn1SccPusSt01FailureCode* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusSt08FunctionId;

#define asn1SccPusSt08FunctionId_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt08FunctionId_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusSt08FunctionId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt08FunctionId_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusSt08FunctionId_REQUIRED_BYTES_FOR_XER_ENCODING   59

void asn1SccPusSt08FunctionId_Initialize(asn1SccPusSt08FunctionId* pVal);
flag asn1SccPusSt08FunctionId_IsConstraintValid(const asn1SccPusSt08FunctionId* val, int* pErrCode);


typedef struct {
    asn1SccPusSt08FunctionId functionId;
} asn1SccPusTC_8_1_Data;

#define asn1SccPusTC_8_1_Data_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusTC_8_1_Data_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusTC_8_1_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusTC_8_1_Data_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusTC_8_1_Data_REQUIRED_BYTES_FOR_XER_ENCODING   78

void asn1SccPusTC_8_1_Data_Initialize(asn1SccPusTC_8_1_Data* pVal);
flag asn1SccPusTC_8_1_Data_IsConstraintValid(const asn1SccPusTC_8_1_Data* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusSt20OnBoardParameterId;

#define asn1SccPusSt20OnBoardParameterId_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusSt20OnBoardParameterId_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusSt20OnBoardParameterId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusSt20OnBoardParameterId_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusSt20OnBoardParameterId_REQUIRED_BYTES_FOR_XER_ENCODING   75

void asn1SccPusSt20OnBoardParameterId_Initialize(asn1SccPusSt20OnBoardParameterId* pVal);
flag asn1SccPusSt20OnBoardParameterId_IsConstraintValid(const asn1SccPusSt20OnBoardParameterId* val, int* pErrCode);


typedef asn1SccPusUInt32 asn1SccPusConfigDummyType;

#define asn1SccPusConfigDummyType_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusConfigDummyType_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusConfigDummyType_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusConfigDummyType_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusConfigDummyType_REQUIRED_BYTES_FOR_XER_ENCODING   61

void asn1SccPusConfigDummyType_Initialize(asn1SccPusConfigDummyType* pVal);
flag asn1SccPusConfigDummyType_IsConstraintValid(const asn1SccPusConfigDummyType* val, int* pErrCode);


typedef asn1SccUint asn1SccPusUInt64;

#define asn1SccPusUInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccPusUInt64_REQUIRED_BITS_FOR_ENCODING        63
#define asn1SccPusUInt64_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccPusUInt64_REQUIRED_BITS_FOR_ACN_ENCODING    63
#define asn1SccPusUInt64_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccPusUInt64_Initialize(asn1SccPusUInt64* pVal);
flag asn1SccPusUInt64_IsConstraintValid(const asn1SccPusUInt64* val, int* pErrCode);
#ifndef ERR_asn1SccPusUInt64 
#define ERR_asn1SccPusUInt64		1027  /*(0 .. 9223372036854775807)*/
#endif

typedef struct {
    asn1SccPusUInt64 data1;
    asn1SccPusUInt64 data2;
} asn1SccPusSt05EventAuxData;

#define asn1SccPusSt05EventAuxData_REQUIRED_BYTES_FOR_ENCODING       16 
#define asn1SccPusSt05EventAuxData_REQUIRED_BITS_FOR_ENCODING        126
#define asn1SccPusSt05EventAuxData_REQUIRED_BYTES_FOR_ACN_ENCODING   16 
#define asn1SccPusSt05EventAuxData_REQUIRED_BITS_FOR_ACN_ENCODING    126
#define asn1SccPusSt05EventAuxData_REQUIRED_BYTES_FOR_XER_ENCODING   113

void asn1SccPusSt05EventAuxData_Initialize(asn1SccPusSt05EventAuxData* pVal);
flag asn1SccPusSt05EventAuxData_IsConstraintValid(const asn1SccPusSt05EventAuxData* val, int* pErrCode);


typedef struct {
    asn1SccPusSt05EventId eventId;
    asn1SccPusSt05EventAuxData data;
} asn1SccPusSt05Event;

#define asn1SccPusSt05Event_REQUIRED_BYTES_FOR_ENCODING       20 
#define asn1SccPusSt05Event_REQUIRED_BITS_FOR_ENCODING        158
#define asn1SccPusSt05Event_REQUIRED_BYTES_FOR_ACN_ENCODING   20 
#define asn1SccPusSt05Event_REQUIRED_BITS_FOR_ACN_ENCODING    158
#define asn1SccPusSt05Event_REQUIRED_BYTES_FOR_XER_ENCODING   151

void asn1SccPusSt05Event_Initialize(asn1SccPusSt05Event* pVal);
flag asn1SccPusSt05Event_IsConstraintValid(const asn1SccPusSt05Event* val, int* pErrCode);


typedef asn1SccPusSt05Event asn1SccPusTM_5_X_Data;

#define asn1SccPusTM_5_X_Data_REQUIRED_BYTES_FOR_ENCODING       20 
#define asn1SccPusTM_5_X_Data_REQUIRED_BITS_FOR_ENCODING        158
#define asn1SccPusTM_5_X_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   20 
#define asn1SccPusTM_5_X_Data_REQUIRED_BITS_FOR_ACN_ENCODING    158
#define asn1SccPusTM_5_X_Data_REQUIRED_BYTES_FOR_XER_ENCODING   155

void asn1SccPusTM_5_X_Data_Initialize(asn1SccPusTM_5_X_Data* pVal);
flag asn1SccPusTM_5_X_Data_IsConstraintValid(const asn1SccPusTM_5_X_Data* val, int* pErrCode);


typedef asn1SccPusUInt64 asn1SccPusSt03StoredParam;

#define asn1SccPusSt03StoredParam_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccPusSt03StoredParam_REQUIRED_BITS_FOR_ENCODING        63
#define asn1SccPusSt03StoredParam_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccPusSt03StoredParam_REQUIRED_BITS_FOR_ACN_ENCODING    63
#define asn1SccPusSt03StoredParam_REQUIRED_BYTES_FOR_XER_ENCODING   61

void asn1SccPusSt03StoredParam_Initialize(asn1SccPusSt03StoredParam* pVal);
flag asn1SccPusSt03StoredParam_IsConstraintValid(const asn1SccPusSt03StoredParam* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccPusSt03StoredParam arr[20];
} asn1SccPusSt03ParameterArray;

#define asn1SccPusSt03ParameterArray_REQUIRED_BYTES_FOR_ENCODING       159 
#define asn1SccPusSt03ParameterArray_REQUIRED_BITS_FOR_ENCODING        1265
#define asn1SccPusSt03ParameterArray_REQUIRED_BYTES_FOR_ACN_ENCODING   159 
#define asn1SccPusSt03ParameterArray_REQUIRED_BITS_FOR_ACN_ENCODING    1265
#define asn1SccPusSt03ParameterArray_REQUIRED_BYTES_FOR_XER_ENCODING   1267

void asn1SccPusSt03ParameterArray_Initialize(asn1SccPusSt03ParameterArray* pVal);
flag asn1SccPusSt03ParameterArray_IsConstraintValid(const asn1SccPusSt03ParameterArray* val, int* pErrCode);
#ifndef ERR_asn1SccPusSt03ParameterArray 
#define ERR_asn1SccPusSt03ParameterArray		1028  /*(SIZE(0 .. pus-ST03-MAX-REPORT-LENGTH))*/
#endif

typedef struct {
    asn1SccPusSt03HousekeepingReportId reportId;
    asn1SccPusSt03ParameterArray parameters;
} asn1SccPusTM_3_25_Data;

#define asn1SccPusTM_3_25_Data_REQUIRED_BYTES_FOR_ENCODING       163 
#define asn1SccPusTM_3_25_Data_REQUIRED_BITS_FOR_ENCODING        1297
#define asn1SccPusTM_3_25_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   163 
#define asn1SccPusTM_3_25_Data_REQUIRED_BITS_FOR_ACN_ENCODING    1297
#define asn1SccPusTM_3_25_Data_REQUIRED_BYTES_FOR_XER_ENCODING   1321

void asn1SccPusTM_3_25_Data_Initialize(asn1SccPusTM_3_25_Data* pVal);
flag asn1SccPusTM_3_25_Data_IsConstraintValid(const asn1SccPusTM_3_25_Data* val, int* pErrCode);


typedef struct {
    asn1SccPusSt23RepositoryPath repository;
    asn1SccPusSt23FileName fileName;
    asn1SccPusUInt64 maxSize;
} asn1SccPusTC_TM_23_1_4_Data;

#define asn1SccPusTC_TM_23_1_4_Data_REQUIRED_BYTES_FOR_ENCODING       70 
#define asn1SccPusTC_TM_23_1_4_Data_REQUIRED_BITS_FOR_ENCODING        553
#define asn1SccPusTC_TM_23_1_4_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   70 
#define asn1SccPusTC_TM_23_1_4_Data_REQUIRED_BITS_FOR_ACN_ENCODING    553
#define asn1SccPusTC_TM_23_1_4_Data_REQUIRED_BYTES_FOR_XER_ENCODING   250

void asn1SccPusTC_TM_23_1_4_Data_Initialize(asn1SccPusTC_TM_23_1_4_Data* pVal);
flag asn1SccPusTC_TM_23_1_4_Data_IsConstraintValid(const asn1SccPusTC_TM_23_1_4_Data* val, int* pErrCode);


typedef asn1SccPusUInt64 asn1SccPusMemAddr;

#define asn1SccPusMemAddr_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccPusMemAddr_REQUIRED_BITS_FOR_ENCODING        63
#define asn1SccPusMemAddr_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccPusMemAddr_REQUIRED_BITS_FOR_ACN_ENCODING    63
#define asn1SccPusMemAddr_REQUIRED_BYTES_FOR_XER_ENCODING   45

void asn1SccPusMemAddr_Initialize(asn1SccPusMemAddr* pVal);
flag asn1SccPusMemAddr_IsConstraintValid(const asn1SccPusMemAddr* val, int* pErrCode);


typedef asn1SccPusUInt64 asn1SccPusSt20StoredParam;

#define asn1SccPusSt20StoredParam_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccPusSt20StoredParam_REQUIRED_BITS_FOR_ENCODING        63
#define asn1SccPusSt20StoredParam_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccPusSt20StoredParam_REQUIRED_BITS_FOR_ACN_ENCODING    63
#define asn1SccPusSt20StoredParam_REQUIRED_BYTES_FOR_XER_ENCODING   61

void asn1SccPusSt20StoredParam_Initialize(asn1SccPusSt20StoredParam* pVal);
flag asn1SccPusSt20StoredParam_IsConstraintValid(const asn1SccPusSt20StoredParam* val, int* pErrCode);


typedef struct {
    asn1SccPusSt20OnBoardParameterId paramId;
    asn1SccPusSt20StoredParam value;
} asn1SccPusTC_TM_20_X_Data;

#define asn1SccPusTC_TM_20_X_Data_REQUIRED_BYTES_FOR_ENCODING       12 
#define asn1SccPusTC_TM_20_X_Data_REQUIRED_BITS_FOR_ENCODING        95
#define asn1SccPusTC_TM_20_X_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   12 
#define asn1SccPusTC_TM_20_X_Data_REQUIRED_BITS_FOR_ACN_ENCODING    95
#define asn1SccPusTC_TM_20_X_Data_REQUIRED_BYTES_FOR_XER_ENCODING   115

void asn1SccPusTC_TM_20_X_Data_Initialize(asn1SccPusTC_TM_20_X_Data* pVal);
flag asn1SccPusTC_TM_20_X_Data_IsConstraintValid(const asn1SccPusTC_TM_20_X_Data* val, int* pErrCode);


typedef struct {
    enum {
        PusTcApplicationDataReduced_NONE,
        PusTcApplicationDataReduced_st_8_1_PRESENT,
        PusTcApplicationDataReduced_st_9_1_PRESENT,
        PusTcApplicationDataReduced_st_12_1_2_PRESENT,
        PusTcApplicationDataReduced_st_18_1_PRESENT,
        PusTcApplicationDataReduced_st_18_2_6_12_PRESENT,
        PusTcApplicationDataReduced_st_18_3_PRESENT,
        PusTcApplicationDataReduced_st_18_4_5_PRESENT,
        PusTcApplicationDataReduced_st_18_13_PRESENT,
        PusTcApplicationDataReduced_st_19_X_PRESENT,
        PusTcApplicationDataReduced_st_20_X_PRESENT,
        PusTcApplicationDataReduced_st_23_1_PRESENT,
        PusTcApplicationDataReduced_st_23_2_3_PRESENT,
        PusTcApplicationDataReduced_st_23_14_PRESENT 
    } kind;
    union {
        asn1SccPusTC_8_1_Data st_8_1;
        asn1SccPusTC_9_1_Data st_9_1;
        asn1SccPusTC_12_1_2_Data st_12_1_2;
        asn1SccPusTC_18_1_Data st_18_1;
        asn1SccPusTC_18_2_6_12_Data st_18_2_6_12;
        asn1SccPusTC_18_3_Data st_18_3;
        asn1SccPusTC_18_4_5_Data st_18_4_5;
        asn1SccPusTC_18_13_Data st_18_13;
        asn1SccPusTC_19_X_Data st_19_X;
        asn1SccPusTC_TM_20_X_Data st_20_X;
        asn1SccPusTC_TM_23_1_4_Data st_23_1;
        asn1SccPusTC_23_2_3_Data st_23_2_3;
        asn1SccPusTC_23_14_Data st_23_14;
    } u; 
} asn1SccPusTcApplicationDataReduced;

#define asn1SccPusTcApplicationDataReduced_REQUIRED_BYTES_FOR_ENCODING       1014 
#define asn1SccPusTcApplicationDataReduced_REQUIRED_BITS_FOR_ENCODING        8110
#define asn1SccPusTcApplicationDataReduced_REQUIRED_BYTES_FOR_ACN_ENCODING   1014 
#define asn1SccPusTcApplicationDataReduced_REQUIRED_BITS_FOR_ACN_ENCODING    8110
#define asn1SccPusTcApplicationDataReduced_REQUIRED_BYTES_FOR_XER_ENCODING   2177

void asn1SccPusTcApplicationDataReduced_Initialize(asn1SccPusTcApplicationDataReduced* pVal);
flag asn1SccPusTcApplicationDataReduced_IsConstraintValid(const asn1SccPusTcApplicationDataReduced* val, int* pErrCode);
#ifndef ERR_asn1SccPusTcApplicationDataReduced_unknown_choice_index 
#define ERR_asn1SccPusTcApplicationDataReduced_unknown_choice_index		1029  /**/
#endif

typedef struct {
    asn1SccPusTcHeader header;
    asn1SccPusTcApplicationDataReduced data;
} asn1SccPusPacketDataReduced_tcData;

#define asn1SccPusPacketDataReduced_tcData_REQUIRED_BYTES_FOR_ENCODING       1018 
#define asn1SccPusPacketDataReduced_tcData_REQUIRED_BITS_FOR_ENCODING        8143
#define asn1SccPusPacketDataReduced_tcData_REQUIRED_BYTES_FOR_ACN_ENCODING   1018 
#define asn1SccPusPacketDataReduced_tcData_REQUIRED_BITS_FOR_ACN_ENCODING    8143
#define asn1SccPusPacketDataReduced_tcData_REQUIRED_BYTES_FOR_XER_ENCODING   2645

void asn1SccPusPacketDataReduced_tcData_Initialize(asn1SccPusPacketDataReduced_tcData* pVal);
flag asn1SccPusPacketDataReduced_tcData_IsConstraintValid(const asn1SccPusPacketDataReduced_tcData* val, int* pErrCode);


typedef asn1SccSint asn1SccPusInt32;

#define asn1SccPusInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccPusInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccPusInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccPusInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccPusInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccPusInt32_Initialize(asn1SccPusInt32* pVal);
flag asn1SccPusInt32_IsConstraintValid(const asn1SccPusInt32* val, int* pErrCode);
#ifndef ERR_asn1SccPusInt32 
#define ERR_asn1SccPusInt32		1030  /*(-2147483648 .. 2147483647)*/
#endif

typedef struct {
    asn1SccPusInt32 subcode;
    asn1SccPusInt32 data;
    asn1SccPusMemAddr address;
} asn1SccPusSt01FailureInfo;

#define asn1SccPusSt01FailureInfo_REQUIRED_BYTES_FOR_ENCODING       16 
#define asn1SccPusSt01FailureInfo_REQUIRED_BITS_FOR_ENCODING        127
#define asn1SccPusSt01FailureInfo_REQUIRED_BYTES_FOR_ACN_ENCODING   16 
#define asn1SccPusSt01FailureInfo_REQUIRED_BITS_FOR_ACN_ENCODING    127
#define asn1SccPusSt01FailureInfo_REQUIRED_BYTES_FOR_XER_ENCODING   152

void asn1SccPusSt01FailureInfo_Initialize(asn1SccPusSt01FailureInfo* pVal);
flag asn1SccPusSt01FailureInfo_IsConstraintValid(const asn1SccPusSt01FailureInfo* val, int* pErrCode);


typedef struct {
    asn1SccPusSt01FailureCode code;
    asn1SccPusSt01FailureInfo info;
} asn1SccPusSt01Failure;

#define asn1SccPusSt01Failure_REQUIRED_BYTES_FOR_ENCODING       20 
#define asn1SccPusSt01Failure_REQUIRED_BITS_FOR_ENCODING        159
#define asn1SccPusSt01Failure_REQUIRED_BYTES_FOR_ACN_ENCODING   20 
#define asn1SccPusSt01Failure_REQUIRED_BITS_FOR_ACN_ENCODING    159
#define asn1SccPusSt01Failure_REQUIRED_BYTES_FOR_XER_ENCODING   190

void asn1SccPusSt01Failure_Initialize(asn1SccPusSt01Failure* pVal);
flag asn1SccPusSt01Failure_IsConstraintValid(const asn1SccPusSt01Failure* val, int* pErrCode);


typedef struct {
    asn1SccPusSt01RequestId request;
    asn1SccPusStepId step;
    asn1SccPusSt01Failure failure;
} asn1SccPusTM_1_X_Data;

#define asn1SccPusTM_1_X_Data_REQUIRED_BYTES_FOR_ENCODING       28 
#define asn1SccPusTM_1_X_Data_REQUIRED_BITS_FOR_ENCODING        218
#define asn1SccPusTM_1_X_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   28 
#define asn1SccPusTM_1_X_Data_REQUIRED_BITS_FOR_ACN_ENCODING    218
#define asn1SccPusTM_1_X_Data_REQUIRED_BYTES_FOR_XER_ENCODING   575

void asn1SccPusTM_1_X_Data_Initialize(asn1SccPusTM_1_X_Data* pVal);
flag asn1SccPusTM_1_X_Data_IsConstraintValid(const asn1SccPusTM_1_X_Data* val, int* pErrCode);


typedef asn1SccSint asn1SccPusInt64;

#define asn1SccPusInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccPusInt64_REQUIRED_BITS_FOR_ENCODING        64
#define asn1SccPusInt64_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccPusInt64_REQUIRED_BITS_FOR_ACN_ENCODING    64
#define asn1SccPusInt64_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccPusInt64_Initialize(asn1SccPusInt64* pVal);
flag asn1SccPusInt64_IsConstraintValid(const asn1SccPusInt64* val, int* pErrCode);
#ifndef ERR_asn1SccPusInt64 
#define ERR_asn1SccPusInt64		1031  /*(-9223372036854775808 .. 9223372036854775807)*/
#endif

typedef struct {
    asn1SccPusInt64 tv_sec;
    asn1SccPusInt64 tv_nsec;
} asn1SccPusTime;

#define asn1SccPusTime_REQUIRED_BYTES_FOR_ENCODING       16 
#define asn1SccPusTime_REQUIRED_BITS_FOR_ENCODING        128
#define asn1SccPusTime_REQUIRED_BYTES_FOR_ACN_ENCODING   16 
#define asn1SccPusTime_REQUIRED_BITS_FOR_ACN_ENCODING    128
#define asn1SccPusTime_REQUIRED_BYTES_FOR_XER_ENCODING   95

void asn1SccPusTime_Initialize(asn1SccPusTime* pVal);
flag asn1SccPusTime_IsConstraintValid(const asn1SccPusTime* val, int* pErrCode);


typedef struct {
    asn1SccPusVersionNumber pusVersion;
    asn1SccPusTimeReferenceStatus timeRefStatus;
    asn1SccPusServiceType serviceId;
    asn1SccPusSubserviceType subtype;
    asn1SccPusMessageTypeCounter msgTypeCount;
    asn1SccPusApid destination;
    asn1SccPusTime time;
} asn1SccPusTmHeader;

#define asn1SccPusTmHeader_REQUIRED_BYTES_FOR_ENCODING       22 
#define asn1SccPusTmHeader_REQUIRED_BITS_FOR_ENCODING        176
#define asn1SccPusTmHeader_REQUIRED_BYTES_FOR_ACN_ENCODING   22 
#define asn1SccPusTmHeader_REQUIRED_BITS_FOR_ACN_ENCODING    176
#define asn1SccPusTmHeader_REQUIRED_BYTES_FOR_XER_ENCODING   385

void asn1SccPusTmHeader_Initialize(asn1SccPusTmHeader* pVal);
flag asn1SccPusTmHeader_IsConstraintValid(const asn1SccPusTmHeader* val, int* pErrCode);


typedef struct {
    asn1SccPusSt09ExponentialRate exponentialRate;
    asn1SccPusTime time;
} asn1SccPusTM_9_2_Data;

#define asn1SccPusTM_9_2_Data_REQUIRED_BYTES_FOR_ENCODING       20 
#define asn1SccPusTM_9_2_Data_REQUIRED_BITS_FOR_ENCODING        160
#define asn1SccPusTM_9_2_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   20 
#define asn1SccPusTM_9_2_Data_REQUIRED_BITS_FOR_ACN_ENCODING    160
#define asn1SccPusTM_9_2_Data_REQUIRED_BYTES_FOR_XER_ENCODING   177

void asn1SccPusTM_9_2_Data_Initialize(asn1SccPusTM_9_2_Data* pVal);
flag asn1SccPusTM_9_2_Data_IsConstraintValid(const asn1SccPusTM_9_2_Data* val, int* pErrCode);


typedef struct {
    enum {
        PusTmSourceData_NONE,
        st_1_X_PRESENT,
        st_3_25_PRESENT,
        st_5_X_PRESENT,
        st_9_2_PRESENT,
        st_20_2_PRESENT,
        st_23_4_PRESENT 
    } kind;
    union {
        asn1SccPusTM_1_X_Data st_1_X;
        asn1SccPusTM_3_25_Data st_3_25;
        asn1SccPusTM_5_X_Data st_5_X;
        asn1SccPusTM_9_2_Data st_9_2;
        asn1SccPusTC_TM_20_X_Data st_20_2;
        asn1SccPusTC_TM_23_1_4_Data st_23_4;
    } u; 
} asn1SccPusTmSourceData;

#define asn1SccPusTmSourceData_REQUIRED_BYTES_FOR_ENCODING       163 
#define asn1SccPusTmSourceData_REQUIRED_BITS_FOR_ENCODING        1300
#define asn1SccPusTmSourceData_REQUIRED_BYTES_FOR_ACN_ENCODING   163 
#define asn1SccPusTmSourceData_REQUIRED_BITS_FOR_ACN_ENCODING    1300
#define asn1SccPusTmSourceData_REQUIRED_BYTES_FOR_XER_ENCODING   1340

void asn1SccPusTmSourceData_Initialize(asn1SccPusTmSourceData* pVal);
flag asn1SccPusTmSourceData_IsConstraintValid(const asn1SccPusTmSourceData* val, int* pErrCode);
#ifndef ERR_asn1SccPusTmSourceData_unknown_choice_index 
#define ERR_asn1SccPusTmSourceData_unknown_choice_index		1032  /**/
#endif

typedef struct {
    asn1SccPusTmHeader header;
    asn1SccPusTmSourceData data;
} asn1SccPusTmHeaderData;

#define asn1SccPusTmHeaderData_REQUIRED_BYTES_FOR_ENCODING       185 
#define asn1SccPusTmHeaderData_REQUIRED_BITS_FOR_ENCODING        1476
#define asn1SccPusTmHeaderData_REQUIRED_BYTES_FOR_ACN_ENCODING   185 
#define asn1SccPusTmHeaderData_REQUIRED_BITS_FOR_ACN_ENCODING    1476
#define asn1SccPusTmHeaderData_REQUIRED_BYTES_FOR_XER_ENCODING   1728

void asn1SccPusTmHeaderData_Initialize(asn1SccPusTmHeaderData* pVal);
flag asn1SccPusTmHeaderData_IsConstraintValid(const asn1SccPusTmHeaderData* val, int* pErrCode);


typedef struct {
    enum {
        PusPacketDataReduced_NONE,
        PusPacketDataReduced_tmData_PRESENT,
        PusPacketDataReduced_tmDataNoHeader_PRESENT,
        PusPacketDataReduced_tcData_PRESENT,
        PusPacketDataReduced_tcDataNoHeader_PRESENT 
    } kind;
    union {
        asn1SccPusTmHeaderData tmData;
        asn1SccPusTmSourceData tmDataNoHeader;
        asn1SccPusPacketDataReduced_tcData tcData;
        asn1SccPusTcApplicationDataReduced tcDataNoHeader;
    } u; 
} asn1SccPusPacketDataReduced;

#define asn1SccPusPacketDataReduced_REQUIRED_BYTES_FOR_ENCODING       1019 
#define asn1SccPusPacketDataReduced_REQUIRED_BITS_FOR_ENCODING        8146
#define asn1SccPusPacketDataReduced_REQUIRED_BYTES_FOR_ACN_ENCODING   1019 
#define asn1SccPusPacketDataReduced_REQUIRED_BITS_FOR_ACN_ENCODING    8146
#define asn1SccPusPacketDataReduced_REQUIRED_BYTES_FOR_XER_ENCODING   2648

void asn1SccPusPacketDataReduced_Initialize(asn1SccPusPacketDataReduced* pVal);
flag asn1SccPusPacketDataReduced_IsConstraintValid(const asn1SccPusPacketDataReduced* val, int* pErrCode);
#ifndef ERR_asn1SccPusPacketDataReduced_unknown_choice_index 
#define ERR_asn1SccPusPacketDataReduced_unknown_choice_index		1033  /**/
#endif

typedef struct {
    asn1SccPusPacketVersion packetVersion;
    asn1SccPusPacketType packetType;
    asn1SccPusSecondaryHeaderFlag secondaryHeaderFlag;
    asn1SccPusApid apid;
    asn1SccPusSequenceFlags sequenceFlags;
    asn1SccPusSequenceCount sequenceCount;
    asn1SccPusPacketDataLength dataLength;
    asn1SccPusPacketDataReduced data;
} asn1SccPusPacketReduced;

#define asn1SccPusPacketReduced_REQUIRED_BYTES_FOR_ENCODING       1024 
#define asn1SccPusPacketReduced_REQUIRED_BITS_FOR_ENCODING        8189
#define asn1SccPusPacketReduced_REQUIRED_BYTES_FOR_ACN_ENCODING   1024 
#define asn1SccPusPacketReduced_REQUIRED_BITS_FOR_ACN_ENCODING    8189
#define asn1SccPusPacketReduced_REQUIRED_BYTES_FOR_XER_ENCODING   3012

void asn1SccPusPacketReduced_Initialize(asn1SccPusPacketReduced* pVal);
flag asn1SccPusPacketReduced_IsConstraintValid(const asn1SccPusPacketReduced* val, int* pErrCode);


typedef struct {
    asn1SccPusSt05EventId eventId;
    asn1SccPusPacketReduced packetReduced;
} asn1SccPusTC_19_1_Data;

#define asn1SccPusTC_19_1_Data_REQUIRED_BYTES_FOR_ENCODING       1028 
#define asn1SccPusTC_19_1_Data_REQUIRED_BITS_FOR_ENCODING        8221
#define asn1SccPusTC_19_1_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   1028 
#define asn1SccPusTC_19_1_Data_REQUIRED_BITS_FOR_ACN_ENCODING    8221
#define asn1SccPusTC_19_1_Data_REQUIRED_BYTES_FOR_XER_ENCODING   3080

void asn1SccPusTC_19_1_Data_Initialize(asn1SccPusTC_19_1_Data* pVal);
flag asn1SccPusTC_19_1_Data_IsConstraintValid(const asn1SccPusTC_19_1_Data* val, int* pErrCode);


typedef struct {
    asn1SccPusTime time;
    asn1SccPusPacketReduced packetReduced;
} asn1SccPusTcScheduledActivity;

#define asn1SccPusTcScheduledActivity_REQUIRED_BYTES_FOR_ENCODING       1040 
#define asn1SccPusTcScheduledActivity_REQUIRED_BITS_FOR_ENCODING        8317
#define asn1SccPusTcScheduledActivity_REQUIRED_BYTES_FOR_ACN_ENCODING   1040 
#define asn1SccPusTcScheduledActivity_REQUIRED_BITS_FOR_ACN_ENCODING    8317
#define asn1SccPusTcScheduledActivity_REQUIRED_BYTES_FOR_XER_ENCODING   3144

void asn1SccPusTcScheduledActivity_Initialize(asn1SccPusTcScheduledActivity* pVal);
flag asn1SccPusTcScheduledActivity_IsConstraintValid(const asn1SccPusTcScheduledActivity* val, int* pErrCode);


typedef struct {    int nCount; 
    
    asn1SccPusTcScheduledActivity arr[5];
} asn1SccPusTC_11_4_Data;

#define asn1SccPusTC_11_4_Data_REQUIRED_BYTES_FOR_ENCODING       5199 
#define asn1SccPusTC_11_4_Data_REQUIRED_BITS_FOR_ENCODING        41588
#define asn1SccPusTC_11_4_Data_REQUIRED_BYTES_FOR_ACN_ENCODING   5199 
#define asn1SccPusTC_11_4_Data_REQUIRED_BITS_FOR_ACN_ENCODING    41588
#define asn1SccPusTC_11_4_Data_REQUIRED_BYTES_FOR_XER_ENCODING   15755

void asn1SccPusTC_11_4_Data_Initialize(asn1SccPusTC_11_4_Data* pVal);
flag asn1SccPusTC_11_4_Data_IsConstraintValid(const asn1SccPusTC_11_4_Data* val, int* pErrCode);
#ifndef ERR_asn1SccPusTC_11_4_Data 
#define ERR_asn1SccPusTC_11_4_Data		1034  /*(SIZE(1 .. pus-ST11-MAX-SCHEDULED-ACTIVITIES))*/
#endif

typedef struct {
    enum {
        PusTcApplicationData_NONE,
        PusTcApplicationData_st_8_1_PRESENT,
        PusTcApplicationData_st_9_1_PRESENT,
        PusTcApplicationData_st_12_1_2_PRESENT,
        PusTcApplicationData_st_18_1_PRESENT,
        PusTcApplicationData_st_18_2_6_12_PRESENT,
        PusTcApplicationData_st_18_3_PRESENT,
        PusTcApplicationData_st_18_4_5_PRESENT,
        PusTcApplicationData_st_18_13_PRESENT,
        PusTcApplicationData_st_19_X_PRESENT,
        PusTcApplicationData_st_20_X_PRESENT,
        PusTcApplicationData_st_23_1_PRESENT,
        PusTcApplicationData_st_23_2_3_PRESENT,
        PusTcApplicationData_st_23_14_PRESENT,
        st_11_4_PRESENT,
        st_19_1_PRESENT 
    } kind;
    union {
        asn1SccPusTC_8_1_Data st_8_1;
        asn1SccPusTC_9_1_Data st_9_1;
        asn1SccPusTC_12_1_2_Data st_12_1_2;
        asn1SccPusTC_18_1_Data st_18_1;
        asn1SccPusTC_18_2_6_12_Data st_18_2_6_12;
        asn1SccPusTC_18_3_Data st_18_3;
        asn1SccPusTC_18_4_5_Data st_18_4_5;
        asn1SccPusTC_18_13_Data st_18_13;
        asn1SccPusTC_19_X_Data st_19_X;
        asn1SccPusTC_TM_20_X_Data st_20_X;
        asn1SccPusTC_TM_23_1_4_Data st_23_1;
        asn1SccPusTC_23_2_3_Data st_23_2_3;
        asn1SccPusTC_23_14_Data st_23_14;
        asn1SccPusTC_11_4_Data st_11_4;
        asn1SccPusTC_19_1_Data st_19_1;
    } u; 
} asn1SccPusTcApplicationData;

#define asn1SccPusTcApplicationData_REQUIRED_BYTES_FOR_ENCODING       5199 
#define asn1SccPusTcApplicationData_REQUIRED_BITS_FOR_ENCODING        41592
#define asn1SccPusTcApplicationData_REQUIRED_BYTES_FOR_ACN_ENCODING   5199 
#define asn1SccPusTcApplicationData_REQUIRED_BITS_FOR_ACN_ENCODING    41592
#define asn1SccPusTcApplicationData_REQUIRED_BYTES_FOR_XER_ENCODING   15784

void asn1SccPusTcApplicationData_Initialize(asn1SccPusTcApplicationData* pVal);
flag asn1SccPusTcApplicationData_IsConstraintValid(const asn1SccPusTcApplicationData* val, int* pErrCode);
#ifndef ERR_asn1SccPusTcApplicationData_unknown_choice_index 
#define ERR_asn1SccPusTcApplicationData_unknown_choice_index		1035  /**/
#endif

typedef struct {
    asn1SccPusTcHeader header;
    asn1SccPusTcApplicationData data;
} asn1SccPusPacketData_tcData;

#define asn1SccPusPacketData_tcData_REQUIRED_BYTES_FOR_ENCODING       5204 
#define asn1SccPusPacketData_tcData_REQUIRED_BITS_FOR_ENCODING        41625
#define asn1SccPusPacketData_tcData_REQUIRED_BYTES_FOR_ACN_ENCODING   5204 
#define asn1SccPusPacketData_tcData_REQUIRED_BITS_FOR_ACN_ENCODING    41625
#define asn1SccPusPacketData_tcData_REQUIRED_BYTES_FOR_XER_ENCODING   16252

void asn1SccPusPacketData_tcData_Initialize(asn1SccPusPacketData_tcData* pVal);
flag asn1SccPusPacketData_tcData_IsConstraintValid(const asn1SccPusPacketData_tcData* val, int* pErrCode);


typedef struct {
    enum {
        PusPacketData_NONE,
        PusPacketData_tmData_PRESENT,
        PusPacketData_tmDataNoHeader_PRESENT,
        PusPacketData_tcData_PRESENT,
        PusPacketData_tcDataNoHeader_PRESENT 
    } kind;
    union {
        asn1SccPusTmHeaderData tmData;
        asn1SccPusTmSourceData tmDataNoHeader;
        asn1SccPusPacketData_tcData tcData;
        asn1SccPusTcApplicationData tcDataNoHeader;
    } u; 
} asn1SccPusPacketData;

#define asn1SccPusPacketData_REQUIRED_BYTES_FOR_ENCODING       5204 
#define asn1SccPusPacketData_REQUIRED_BITS_FOR_ENCODING        41628
#define asn1SccPusPacketData_REQUIRED_BYTES_FOR_ACN_ENCODING   5204 
#define asn1SccPusPacketData_REQUIRED_BITS_FOR_ACN_ENCODING    41628
#define asn1SccPusPacketData_REQUIRED_BYTES_FOR_XER_ENCODING   16255

void asn1SccPusPacketData_Initialize(asn1SccPusPacketData* pVal);
flag asn1SccPusPacketData_IsConstraintValid(const asn1SccPusPacketData* val, int* pErrCode);
#ifndef ERR_asn1SccPusPacketData_unknown_choice_index 
#define ERR_asn1SccPusPacketData_unknown_choice_index		1036  /**/
#endif

typedef struct {
    asn1SccPusPacketVersion packetVersion;
    asn1SccPusPacketType packetType;
    asn1SccPusSecondaryHeaderFlag secondaryHeaderFlag;
    asn1SccPusApid apid;
    asn1SccPusSequenceFlags sequenceFlags;
    asn1SccPusSequenceCount sequenceCount;
    asn1SccPusPacketDataLength dataLength;
    asn1SccPusPacketData data;
} asn1SccPusPacket;

#define asn1SccPusPacket_REQUIRED_BYTES_FOR_ENCODING       5209 
#define asn1SccPusPacket_REQUIRED_BITS_FOR_ENCODING        41671
#define asn1SccPusPacket_REQUIRED_BYTES_FOR_ACN_ENCODING   5209 
#define asn1SccPusPacket_REQUIRED_BITS_FOR_ACN_ENCODING    41671
#define asn1SccPusPacket_REQUIRED_BYTES_FOR_XER_ENCODING   16619

void asn1SccPusPacket_Initialize(asn1SccPusPacket* pVal);
flag asn1SccPusPacket_IsConstraintValid(const asn1SccPusPacket* val, int* pErrCode);


typedef flag asn1SccTASTE_Boolean;

#define asn1SccTASTE_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccTASTE_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccTASTE_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccTASTE_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccTASTE_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   44

void asn1SccTASTE_Boolean_Initialize(asn1SccTASTE_Boolean* pVal);
flag asn1SccTASTE_Boolean_IsConstraintValid(const asn1SccTASTE_Boolean* val, int* pErrCode);


extern const asn1SccPusSt05EventId pus_EVENT_ID_NONE;
extern const asn1SccPusSt05EventAuxData pus_EVENT_AUXDATA_NONE;
extern const asn1SccPusUInt64 pus_EVENT_DATASTORED_NONE;
extern const asn1SccPusSt03HousekeepingReportId pus_ST03_DEFAULT_HK_REPORT;
extern const asn1SccPusPacketVersion pus_PACKET_VERSION_CURRENT;
extern const asn1SccPusApid pus_APID_TIME;
extern const asn1SccPusApid pus_APID_IDLE;
extern const asn1SccPusVersionNumber pus_VERSION_CURRENT;
extern const asn1SccPusTimeReferenceStatus pus_TIME_REFERENCE_STATUS_NONE;
extern const asn1SccPusMessageTypeCounter pus_MESSAGE_TYPE_COUNTER_NONE;
extern const asn1SccPusStepId pus_STEP_NONE;
extern const asn1SccPusSt01FailureCode pus_ST01_NO_ERROR;
extern const asn1SccPusSt01FailureCode pus_ST01_ERROR_APID_UNAVAILABLE;
extern const asn1SccPusSt01FailureCode pus_ST01_ERROR_SERVICE_UNAVAILABLE;
extern const asn1SccPusSt01FailureCode pus_ST01_ERROR_SUBTYPE_UNAVAILABLE;
extern const asn1SccPusSt01FailureCode pus_ST01_ERROR_APID_UNKNOWN;
extern const asn1SccPusSt01FailureCode pus_ST01_ERROR_SERVICE_UNKNOWN;
extern const asn1SccPusSt01FailureCode pus_ST01_ERROR_SUBTYPE_UNKNOWN;
extern const asn1SccPusSt01FailureCode pus_ST01_ERROR_WRONG_FORMAT;
extern const asn1SccPusSt01FailureCode pus_ST01_ERROR_CHECKSUM;
extern const asn1SccPusUInt32 pus_ST03_MAX_REPORT_LENGTH;
extern const asn1SccPusUInt32 pus_ST11_MAX_SCHEDULED_ACTIVITIES;
extern const asn1SccPusUInt32 pus_ST18_SIZE_OBCP_ID;
extern const asn1SccPusUInt32 pus_ST18_MAX_SIZE_OBCP_CODE;
extern const asn1SccPusUInt32 pus_ST18_SIZE_OBCP_CHECKSUM;
extern const asn1SccPusUInt32 pus_ST23_MAX_SIZE_FILE_PATH;
extern const asn1SccPusUInt32 pus_ST23_MAX_SIZE_REPOSITORY_PATH;
extern const asn1SccPusUInt32 pus_ST23_MAX_SIZE_REPOSITORY_DOMAIN;
extern const asn1SccPusUInt32 pus_ST23_MAX_SIZE_FILE;
extern const asn1SccPusServiceType pusService_NONE;
extern const asn1SccPusServiceType pus_ST01_requestVerification;
extern const asn1SccPusServiceType pus_ST02_deviceAccess;
extern const asn1SccPusServiceType pus_ST03_housekeeping;
extern const asn1SccPusServiceType pus_ST04_parameterStatisticsReporting;
extern const asn1SccPusServiceType pus_ST05_eventReporting;
extern const asn1SccPusServiceType pus_ST06_memoryManagement;
extern const asn1SccPusServiceType pus_ST08_functionManagement;
extern const asn1SccPusServiceType pus_ST09_timeManagement;
extern const asn1SccPusServiceType pus_ST11_timeBasedScheduling;
extern const asn1SccPusServiceType pus_ST12_onBoardMonitoring;
extern const asn1SccPusServiceType pus_ST13_largePacketTransfer;
extern const asn1SccPusServiceType pus_ST14_realTimeForwardingControl;
extern const asn1SccPusServiceType pus_ST15_onBoardStorageAndRetrieval;
extern const asn1SccPusServiceType pus_ST17_test;
extern const asn1SccPusServiceType pus_ST18_onBoardControlProcedure;
extern const asn1SccPusServiceType pus_ST19_eventAction;
extern const asn1SccPusServiceType pus_ST20_parameterManagement;
extern const asn1SccPusServiceType pus_ST21_requestSequencing;
extern const asn1SccPusServiceType pus_ST22_partitionBasedScheduling;
extern const asn1SccPusServiceType pus_ST23_fileManagement;
extern const asn1SccPusSubserviceType pusSubtype_NONE;
extern const asn1SccPusSubserviceType pus_TM_1_1_successfulAcceptance;
extern const asn1SccPusSubserviceType pus_TM_1_2_failedAcceptance;
extern const asn1SccPusSubserviceType pus_TM_1_3_successfulStart;
extern const asn1SccPusSubserviceType pus_TM_1_4_failedStart;
extern const asn1SccPusSubserviceType pus_TM_1_5_successfulProgress;
extern const asn1SccPusSubserviceType pus_TM_1_6_failedProgress;
extern const asn1SccPusSubserviceType pus_TM_1_7_successfulCompletion;
extern const asn1SccPusSubserviceType pus_TM_1_8_failedCompletion;
extern const asn1SccPusSubserviceType pus_TM_3_25_housekeepingReport;
extern const asn1SccPusSubserviceType pus_TM_5_1_eventInformative;
extern const asn1SccPusSubserviceType pus_TM_5_2_anomalyLowSeverity;
extern const asn1SccPusSubserviceType pus_TM_5_3_anomalyMediumSeverity;
extern const asn1SccPusSubserviceType pus_TM_5_4_anomalyHighSeverity;
extern const asn1SccPusSubserviceType pus_TC_8_1_performFunction;
extern const asn1SccPusSubserviceType pus_TC_9_1_setTimeReportRate;
extern const asn1SccPusSubserviceType pus_TM_9_2_cucTimeReport;
extern const asn1SccPusSubserviceType pus_TC_11_1_enableTimeBasedScheduling;
extern const asn1SccPusSubserviceType pus_TC_11_2_disableTimeBasedScheduling;
extern const asn1SccPusSubserviceType pus_TC_11_3_resetTimeBasedSchedule;
extern const asn1SccPusSubserviceType pus_TC_11_4_insertActivity;
extern const asn1SccPusSubserviceType pus_TC_12_1_enableParameterMonitoringDefinitions;
extern const asn1SccPusSubserviceType pus_TC_12_2_disableParameterMonitoringDefinitions;
extern const asn1SccPusSubserviceType pus_TC_12_15_enableParameterMonitoring;
extern const asn1SccPusSubserviceType pus_TC_12_16_disableParameterMonitoring;
extern const asn1SccPusSubserviceType pus_TC_17_1_connectionTest;
extern const asn1SccPusSubserviceType pus_TM_17_2_connectionTest;
extern const asn1SccPusSubserviceType pus_TC_18_1_loadObcpDirect;
extern const asn1SccPusSubserviceType pus_TC_18_2_unloadObcp;
extern const asn1SccPusSubserviceType pus_TC_18_3_activateObcp;
extern const asn1SccPusSubserviceType pus_TC_18_4_stopObcp;
extern const asn1SccPusSubserviceType pus_TC_18_5_suspendObcp;
extern const asn1SccPusSubserviceType pus_TC_18_6_resumeObcp;
extern const asn1SccPusSubserviceType pus_TC_18_12_abortObcp;
extern const asn1SccPusSubserviceType pus_TC_18_13_loadObcpByReference;
extern const asn1SccPusSubserviceType pus_TC_18_21_startObcpEngine;
extern const asn1SccPusSubserviceType pus_TC_18_22_stopObcpEngine;
extern const asn1SccPusSubserviceType pus_TC_19_1_addEventActionDefinitions;
extern const asn1SccPusSubserviceType pus_TC_19_2_deleteEventActionDefinitions;
extern const asn1SccPusSubserviceType pus_TC_19_4_enableEventActionDefinitions;
extern const asn1SccPusSubserviceType pus_TC_19_5_disableEventActionDefinitions;
extern const asn1SccPusSubserviceType pus_TC_20_1_reportParameterValues;
extern const asn1SccPusSubserviceType pus_TM_20_2_reportParameterValues;
extern const asn1SccPusSubserviceType pus_TC_20_3_setParameterValues;
extern const asn1SccPusSubserviceType pus_TC_23_1_createFile;
extern const asn1SccPusSubserviceType pus_TC_23_2_deleteFile;
extern const asn1SccPusSubserviceType pus_TC_23_3_reportFileAttributes;
extern const asn1SccPusSubserviceType pus_TM_23_4_reportFileAttributes;
extern const asn1SccPusSubserviceType pus_TC_23_14_copyFile; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccPusSt18ObcpId_Encode(const asn1SccPusSt18ObcpId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt18ObcpId_Decode(asn1SccPusSt18ObcpId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_18_2_6_12_Data_Encode(const asn1SccPusTC_18_2_6_12_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_18_2_6_12_Data_Decode(asn1SccPusTC_18_2_6_12_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt18ObcpCode_Encode(const asn1SccPusSt18ObcpCode* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt18ObcpCode_Decode(asn1SccPusSt18ObcpCode* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt18ObservabilityLevel_Encode(const asn1SccPusSt18ObservabilityLevel* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt18ObservabilityLevel_Decode(asn1SccPusSt18ObservabilityLevel* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_18_3_Data_Encode(const asn1SccPusTC_18_3_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_18_3_Data_Decode(asn1SccPusTC_18_3_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacketVersion_Encode(const asn1SccPusPacketVersion* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacketVersion_Decode(asn1SccPusPacketVersion* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacketType_Encode(const asn1SccPusPacketType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacketType_Decode(asn1SccPusPacketType* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSecondaryHeaderFlag_Encode(const asn1SccPusSecondaryHeaderFlag* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSecondaryHeaderFlag_Decode(asn1SccPusSecondaryHeaderFlag* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSequenceFlags_Encode(const asn1SccPusSequenceFlags* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSequenceFlags_Decode(asn1SccPusSequenceFlags* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusVersionNumber_Encode(const asn1SccPusVersionNumber* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusVersionNumber_Decode(asn1SccPusVersionNumber* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusAcknowledgementFlags_Encode(const asn1SccPusAcknowledgementFlags* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusAcknowledgementFlags_Decode(asn1SccPusAcknowledgementFlags* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int32_Encode(const asn1SccT_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int8_Encode(const asn1SccT_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt23RepositoryPath_Encode(const asn1SccPusSt23RepositoryPath* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt23RepositoryPath_Decode(asn1SccPusSt23RepositoryPath* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt23FileName_Encode(const asn1SccPusSt23FileName* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt23FileName_Decode(asn1SccPusSt23FileName* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_18_13_Data_Encode(const asn1SccPusTC_18_13_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_18_13_Data_Decode(asn1SccPusTC_18_13_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_23_2_3_Data_Encode(const asn1SccPusTC_23_2_3_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_23_2_3_Data_Decode(asn1SccPusTC_23_2_3_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_23_14_Data_Encode(const asn1SccPusTC_23_14_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_23_14_Data_Decode(asn1SccPusTC_23_14_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt23RepositoryDomain_Encode(const asn1SccPusSt23RepositoryDomain* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt23RepositoryDomain_Decode(asn1SccPusSt23RepositoryDomain* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusUInt3_Encode(const asn1SccPusUInt3* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusUInt3_Decode(asn1SccPusUInt3* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusUInt4_Encode(const asn1SccPusUInt4* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusUInt4_Decode(asn1SccPusUInt4* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTimeReferenceStatus_Encode(const asn1SccPusTimeReferenceStatus* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTimeReferenceStatus_Decode(asn1SccPusTimeReferenceStatus* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusUInt8_Encode(const asn1SccPusUInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusUInt8_Decode(asn1SccPusUInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusServiceType_Encode(const asn1SccPusServiceType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusServiceType_Decode(asn1SccPusServiceType* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSubserviceType_Encode(const asn1SccPusSubserviceType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSubserviceType_Decode(asn1SccPusSubserviceType* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusUInt11_Encode(const asn1SccPusUInt11* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusUInt11_Decode(asn1SccPusUInt11* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusApid_Encode(const asn1SccPusApid* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusApid_Decode(asn1SccPusApid* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTcHeader_Encode(const asn1SccPusTcHeader* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTcHeader_Decode(asn1SccPusTcHeader* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusUInt14_Encode(const asn1SccPusUInt14* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusUInt14_Decode(asn1SccPusUInt14* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSequenceCount_Encode(const asn1SccPusSequenceCount* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSequenceCount_Decode(asn1SccPusSequenceCount* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt01RequestId_Encode(const asn1SccPusSt01RequestId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt01RequestId_Decode(asn1SccPusSt01RequestId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusUInt16_Encode(const asn1SccPusUInt16* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusUInt16_Decode(asn1SccPusUInt16* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt18ObcpChecksum_Encode(const asn1SccPusSt18ObcpChecksum* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt18ObcpChecksum_Decode(asn1SccPusSt18ObcpChecksum* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_18_1_Data_Encode(const asn1SccPusTC_18_1_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_18_1_Data_Decode(asn1SccPusTC_18_1_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacketDataLength_Encode(const asn1SccPusPacketDataLength* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacketDataLength_Decode(asn1SccPusPacketDataLength* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusMessageTypeCounter_Encode(const asn1SccPusMessageTypeCounter* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusMessageTypeCounter_Decode(asn1SccPusMessageTypeCounter* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusChecksum_Encode(const asn1SccPusChecksum* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusChecksum_Decode(asn1SccPusChecksum* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusUInt32_Encode(const asn1SccPusUInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusUInt32_Decode(asn1SccPusUInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt09ExponentialRate_Encode(const asn1SccPusSt09ExponentialRate* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt09ExponentialRate_Decode(asn1SccPusSt09ExponentialRate* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_9_1_Data_Encode(const asn1SccPusTC_9_1_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_9_1_Data_Decode(asn1SccPusTC_9_1_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_18_4_5_Data_Encode(const asn1SccPusTC_18_4_5_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_18_4_5_Data_Decode(asn1SccPusTC_18_4_5_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt05EventId_Encode(const asn1SccPusSt05EventId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt05EventId_Decode(asn1SccPusSt05EventId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_19_X_Data_Encode(const asn1SccPusTC_19_X_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_19_X_Data_Decode(asn1SccPusTC_19_X_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt03HousekeepingReportId_Encode(const asn1SccPusSt03HousekeepingReportId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt03HousekeepingReportId_Decode(asn1SccPusSt03HousekeepingReportId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt03ParameterId_Encode(const asn1SccPusSt03ParameterId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt03ParameterId_Decode(asn1SccPusSt03ParameterId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusStepId_Encode(const asn1SccPusStepId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusStepId_Decode(asn1SccPusStepId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt12pmonId_Encode(const asn1SccPusSt12pmonId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt12pmonId_Decode(asn1SccPusSt12pmonId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_12_1_2_Data_Encode(const asn1SccPusTC_12_1_2_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_12_1_2_Data_Decode(asn1SccPusTC_12_1_2_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt01FailureCode_Encode(const asn1SccPusSt01FailureCode* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt01FailureCode_Decode(asn1SccPusSt01FailureCode* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt08FunctionId_Encode(const asn1SccPusSt08FunctionId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt08FunctionId_Decode(asn1SccPusSt08FunctionId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_8_1_Data_Encode(const asn1SccPusTC_8_1_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_8_1_Data_Decode(asn1SccPusTC_8_1_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt20OnBoardParameterId_Encode(const asn1SccPusSt20OnBoardParameterId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt20OnBoardParameterId_Decode(asn1SccPusSt20OnBoardParameterId* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusConfigDummyType_Encode(const asn1SccPusConfigDummyType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusConfigDummyType_Decode(asn1SccPusConfigDummyType* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusUInt64_Encode(const asn1SccPusUInt64* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusUInt64_Decode(asn1SccPusUInt64* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt05EventAuxData_Encode(const asn1SccPusSt05EventAuxData* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt05EventAuxData_Decode(asn1SccPusSt05EventAuxData* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt05Event_Encode(const asn1SccPusSt05Event* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt05Event_Decode(asn1SccPusSt05Event* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTM_5_X_Data_Encode(const asn1SccPusTM_5_X_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTM_5_X_Data_Decode(asn1SccPusTM_5_X_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt03StoredParam_Encode(const asn1SccPusSt03StoredParam* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt03StoredParam_Decode(asn1SccPusSt03StoredParam* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt03ParameterArray_Encode(const asn1SccPusSt03ParameterArray* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt03ParameterArray_Decode(asn1SccPusSt03ParameterArray* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTM_3_25_Data_Encode(const asn1SccPusTM_3_25_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTM_3_25_Data_Decode(asn1SccPusTM_3_25_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_TM_23_1_4_Data_Encode(const asn1SccPusTC_TM_23_1_4_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_TM_23_1_4_Data_Decode(asn1SccPusTC_TM_23_1_4_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusMemAddr_Encode(const asn1SccPusMemAddr* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusMemAddr_Decode(asn1SccPusMemAddr* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt20StoredParam_Encode(const asn1SccPusSt20StoredParam* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt20StoredParam_Decode(asn1SccPusSt20StoredParam* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_TM_20_X_Data_Encode(const asn1SccPusTC_TM_20_X_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_TM_20_X_Data_Decode(asn1SccPusTC_TM_20_X_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTcApplicationDataReduced_Encode(const asn1SccPusTcApplicationDataReduced* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTcApplicationDataReduced_Decode(asn1SccPusTcApplicationDataReduced* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacketDataReduced_tcData_Encode(const asn1SccPusPacketDataReduced_tcData* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacketDataReduced_tcData_Decode(asn1SccPusPacketDataReduced_tcData* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusInt32_Encode(const asn1SccPusInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusInt32_Decode(asn1SccPusInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt01FailureInfo_Encode(const asn1SccPusSt01FailureInfo* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt01FailureInfo_Decode(asn1SccPusSt01FailureInfo* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusSt01Failure_Encode(const asn1SccPusSt01Failure* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusSt01Failure_Decode(asn1SccPusSt01Failure* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTM_1_X_Data_Encode(const asn1SccPusTM_1_X_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTM_1_X_Data_Decode(asn1SccPusTM_1_X_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusInt64_Encode(const asn1SccPusInt64* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusInt64_Decode(asn1SccPusInt64* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTime_Encode(const asn1SccPusTime* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTime_Decode(asn1SccPusTime* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTmHeader_Encode(const asn1SccPusTmHeader* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTmHeader_Decode(asn1SccPusTmHeader* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTM_9_2_Data_Encode(const asn1SccPusTM_9_2_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTM_9_2_Data_Decode(asn1SccPusTM_9_2_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTmSourceData_Encode(const asn1SccPusTmSourceData* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTmSourceData_Decode(asn1SccPusTmSourceData* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTmHeaderData_Encode(const asn1SccPusTmHeaderData* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTmHeaderData_Decode(asn1SccPusTmHeaderData* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacketDataReduced_Encode(const asn1SccPusPacketDataReduced* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacketDataReduced_Decode(asn1SccPusPacketDataReduced* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacketReduced_Encode(const asn1SccPusPacketReduced* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacketReduced_Decode(asn1SccPusPacketReduced* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_19_1_Data_Encode(const asn1SccPusTC_19_1_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_19_1_Data_Decode(asn1SccPusTC_19_1_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTcScheduledActivity_Encode(const asn1SccPusTcScheduledActivity* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTcScheduledActivity_Decode(asn1SccPusTcScheduledActivity* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTC_11_4_Data_Encode(const asn1SccPusTC_11_4_Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTC_11_4_Data_Decode(asn1SccPusTC_11_4_Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusTcApplicationData_Encode(const asn1SccPusTcApplicationData* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusTcApplicationData_Decode(asn1SccPusTcApplicationData* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacketData_tcData_Encode(const asn1SccPusPacketData_tcData* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacketData_tcData_Decode(asn1SccPusPacketData_tcData* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacketData_Encode(const asn1SccPusPacketData* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacketData_Decode(asn1SccPusPacketData* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccPusPacket_Encode(const asn1SccPusPacket* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccPusPacket_Decode(asn1SccPusPacket* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccTASTE_Boolean_Encode(const asn1SccTASTE_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccTASTE_Boolean_Decode(asn1SccTASTE_Boolean* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_asn1Sccnone	asn1Sccnone
#define ENUM_asn1Sccprocedure	asn1Sccprocedure
#define ENUM_asn1Sccstep	asn1Sccstep
#define ENUM_asn1Sccdetailed	asn1Sccdetailed
#define ENUM_asn1Sccpus_CCSDS_V1	asn1Sccpus_CCSDS_V1
#define ENUM_asn1Sccpus_TM	asn1Sccpus_TM
#define ENUM_asn1Sccpus_TC	asn1Sccpus_TC
#define ENUM_asn1Sccpus_STANDALONE_PACKET	asn1Sccpus_STANDALONE_PACKET
#define ENUM_asn1Sccpus_V0	asn1Sccpus_V0
#define ENUM_asn1Sccpus_V1	asn1Sccpus_V1
#define ENUM_asn1Sccpus_V2	asn1Sccpus_V2
#define ENUM_asn1Sccpus_INVALID_VERSION	asn1Sccpus_INVALID_VERSION
#define CHOICE_PusTcApplicationDataReduced_st_8_1_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_8_1_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_9_1_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_9_1_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_12_1_2_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_12_1_2_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_18_1_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_18_1_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_18_2_6_12_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_18_2_6_12_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_18_3_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_18_3_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_18_4_5_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_18_4_5_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_18_13_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_18_13_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_19_X_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_19_X_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_20_X_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_20_X_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_23_1_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_23_1_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_23_2_3_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_23_2_3_PRESENT
#define CHOICE_PusTcApplicationDataReduced_st_23_14_PRESENT	asn1SccPusTcApplicationDataReduced::PusTcApplicationDataReduced_st_23_14_PRESENT
#define CHOICE_st_1_X_PRESENT	asn1SccPusTmSourceData::st_1_X_PRESENT
#define CHOICE_st_3_25_PRESENT	asn1SccPusTmSourceData::st_3_25_PRESENT
#define CHOICE_st_5_X_PRESENT	asn1SccPusTmSourceData::st_5_X_PRESENT
#define CHOICE_st_9_2_PRESENT	asn1SccPusTmSourceData::st_9_2_PRESENT
#define CHOICE_st_20_2_PRESENT	asn1SccPusTmSourceData::st_20_2_PRESENT
#define CHOICE_st_23_4_PRESENT	asn1SccPusTmSourceData::st_23_4_PRESENT
#define CHOICE_PusPacketDataReduced_tmData_PRESENT	asn1SccPusPacketDataReduced::PusPacketDataReduced_tmData_PRESENT
#define CHOICE_PusPacketDataReduced_tmDataNoHeader_PRESENT	asn1SccPusPacketDataReduced::PusPacketDataReduced_tmDataNoHeader_PRESENT
#define CHOICE_PusPacketDataReduced_tcData_PRESENT	asn1SccPusPacketDataReduced::PusPacketDataReduced_tcData_PRESENT
#define CHOICE_PusPacketDataReduced_tcDataNoHeader_PRESENT	asn1SccPusPacketDataReduced::PusPacketDataReduced_tcDataNoHeader_PRESENT
#define CHOICE_PusTcApplicationData_st_8_1_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_8_1_PRESENT
#define CHOICE_PusTcApplicationData_st_9_1_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_9_1_PRESENT
#define CHOICE_PusTcApplicationData_st_12_1_2_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_12_1_2_PRESENT
#define CHOICE_PusTcApplicationData_st_18_1_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_18_1_PRESENT
#define CHOICE_PusTcApplicationData_st_18_2_6_12_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_18_2_6_12_PRESENT
#define CHOICE_PusTcApplicationData_st_18_3_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_18_3_PRESENT
#define CHOICE_PusTcApplicationData_st_18_4_5_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_18_4_5_PRESENT
#define CHOICE_PusTcApplicationData_st_18_13_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_18_13_PRESENT
#define CHOICE_PusTcApplicationData_st_19_X_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_19_X_PRESENT
#define CHOICE_PusTcApplicationData_st_20_X_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_20_X_PRESENT
#define CHOICE_PusTcApplicationData_st_23_1_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_23_1_PRESENT
#define CHOICE_PusTcApplicationData_st_23_2_3_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_23_2_3_PRESENT
#define CHOICE_PusTcApplicationData_st_23_14_PRESENT	asn1SccPusTcApplicationData::PusTcApplicationData_st_23_14_PRESENT
#define CHOICE_st_11_4_PRESENT	asn1SccPusTcApplicationData::st_11_4_PRESENT
#define CHOICE_st_19_1_PRESENT	asn1SccPusTcApplicationData::st_19_1_PRESENT
#define CHOICE_PusPacketData_tmData_PRESENT	asn1SccPusPacketData::PusPacketData_tmData_PRESENT
#define CHOICE_PusPacketData_tmDataNoHeader_PRESENT	asn1SccPusPacketData::PusPacketData_tmDataNoHeader_PRESENT
#define CHOICE_PusPacketData_tcData_PRESENT	asn1SccPusPacketData::PusPacketData_tcData_PRESENT
#define CHOICE_PusPacketData_tcDataNoHeader_PRESENT	asn1SccPusPacketData::PusPacketData_tcDataNoHeader_PRESENT

#endif

#endif
