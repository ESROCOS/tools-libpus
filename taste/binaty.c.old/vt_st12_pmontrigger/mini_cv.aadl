-- Automatically Generated - For use with AADL2GlueC only - Do NOT modify! --

SUBPROGRAM artificial_PmonTrigger
END artificial_PmonTrigger;

SUBPROGRAM IMPLEMENTATION artificial_PmonTrigger.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END artificial_PmonTrigger.C;

SUBPROGRAM PmonTrigger
END PmonTrigger;

SUBPROGRAM IMPLEMENTATION PmonTrigger.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END PmonTrigger.C;

SUBPROGRAM incCount_vt
FEATURES
	tmPacket:IN PARAMETER DataView::PusPacket {encoding=>NATIVE;};
	isAvailable:IN PARAMETER DataView::PusSt01FailureCode {encoding=>NATIVE;};
END incCount_vt;

SUBPROGRAM IMPLEMENTATION incCount_vt.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END incCount_vt.C;

SUBPROGRAM newTm_vt
FEATURES
	tmPacket:OUT PARAMETER DataView::PusPacket {encoding=>NATIVE;};
END newTm_vt;

SUBPROGRAM IMPLEMENTATION newTm_vt.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END newTm_vt.C;

SUBPROGRAM getSequenceCount_vt
FEATURES
	sequenceCount:IN PARAMETER DataView::PusSequenceCount {encoding=>NATIVE;};
END getSequenceCount_vt;

SUBPROGRAM IMPLEMENTATION getSequenceCount_vt.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END getSequenceCount_vt.C;

SUBPROGRAM getApid_vt
FEATURES
	apid:IN PARAMETER DataView::PusApid {encoding=>NATIVE;};
END getApid_vt;

SUBPROGRAM IMPLEMENTATION getApid_vt.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END getApid_vt.C;

SUBPROGRAM ACK_vt
FEATURES
	tcPacket:OUT PARAMETER DataView::PusPacket {encoding=>NATIVE;};
	reportType:OUT PARAMETER DataView::PusSubserviceType {encoding=>NATIVE;};
	error:OUT PARAMETER DataView::PusSt01FailureCode {encoding=>NATIVE;};
	errorInfo:OUT PARAMETER DataView::PusSt01FailureInfo {encoding=>NATIVE;};
	step:OUT PARAMETER DataView::PusStepId {encoding=>NATIVE;};
END ACK_vt;

SUBPROGRAM IMPLEMENTATION ACK_vt.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END ACK_vt.C;

SUBPROGRAM check_queue_vt
FEATURES
	res:IN PARAMETER DataView::T_Boolean {encoding=>NATIVE;};
END check_queue_vt;

SUBPROGRAM IMPLEMENTATION check_queue_vt.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END check_queue_vt.C;

SUBPROGRAM pushNewEvent_vt
FEATURES
	eventInfo:OUT PARAMETER DataView::PusSt05Event {encoding=>NATIVE;};
END pushNewEvent_vt;

SUBPROGRAM IMPLEMENTATION pushNewEvent_vt.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END pushNewEvent_vt.C;

SUBPROGRAM getParamValue_vt
FEATURES
	paramId:OUT PARAMETER DataView::PusSt03ParameterId {encoding=>NATIVE;};
	paramValue:IN PARAMETER DataView::PusSt03StoredParam {encoding=>NATIVE;};
	isAvailable:IN PARAMETER DataView::PusSt01FailureCode {encoding=>NATIVE;};
END getParamValue_vt;

SUBPROGRAM IMPLEMENTATION getParamValue_vt.C
PROPERTIES
	FV_Name => "vt_st12_pmontrigger";
	Source_Language => C;
END getParamValue_vt.C;

