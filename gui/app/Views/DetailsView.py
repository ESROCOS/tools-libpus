from PySide import QtGui, QtCore
from Views.Views_Ui.Ui_DetailsView import Ui_DetailsView


class DetailsView:
    """
    This class represents a window. It references the class
    Ui_DetailsView, that class is where the graphics
    are created
    """
    resizeFlag = False

    def __init__(self):
        """
        This is the constructor of the class
        """
        self.view = QtGui.QWidget()
        self.window = Ui_DetailsView()
        self.window.setupUi(self.view)
        self.extra_customization()
        self.view.resizeEvent = self.resize_elements

    def get_window(self):
        """
        This method returns the view that this class references

        :return: A view. It could be a QWidget, QMainWindow, etc.
        """
        return self.view

    def extra_customization(self):
        """
        This method allow us to define an extra configuration for the
        view without having to touch the code generated by the QtDesigner
        giving us a extra level of abstraction
        """
        self.view.setStyleSheet("background-color: white")

    def resize_elements(self, event):
        """
        This method defines all the instructions needed to make
        our DetailsView window responsive

        :param event: The event that triggers this method
        """
        padding = 20
        if self.resizeFlag:
            cte_y = self.window.informationValueLabel.pos().y()
            self.window.informationValueLabel.resize(self.view.frameGeometry().width() - 2 * padding,
                                                     self.view.frameGeometry().height() - 3 * padding + 4 - cte_y)
        else:
            self.resizeFlag = True

    def show(self):
        """
        This method calls to the .show() method of the view referenced
        by this class
        """
        self.view.show()

    def write_information(self, elem: str):
        """
        This method writes all the information got form the database
        of the package we are querying
        :return:
        """
        #string = self.__convert_dict__(elem)
        self.window.informationValueLabel.setText(elem)

    def destroy(self):
        self.view.destroy()

